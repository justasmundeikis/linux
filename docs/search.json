[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Linux vaikams ir pradedantiesiems",
    "section": "",
    "text": "Įvadas",
    "crumbs": [
      "Įvadas"
    ]
  },
  {
    "objectID": "index.html#operacinė-sistema",
    "href": "index.html#operacinė-sistema",
    "title": "Linux vaikams ir pradedantiesiems",
    "section": "Operacinė sistema",
    "text": "Operacinė sistema\nKai tu įjungi savo telefoną, kompiuterį ar mikrokompiuterį, jame pasileidžia programa - instrukcijų rinkinys, kuris nurodo, kaip tavo prietaisas turi veikti. Ši programa nurodo, pavyzdžiui, įjungus prietaisą pradėti šviesti ekranui, paspaudus klavišus abc suprasti, kad tu rašai, arba įjungus elektros kabelį pradėti krauti bateriją.\n\n\n\nKompiuteris. Autorius: Alessandro Oliverio\n\n\nŠis instrukcijų rinkinys dar nėra visavertė operacinė sistema. Tai yra vadinamasis branduolys (angl. - kernel), kuris nurodo, kaip turi veikti kompiuterinė įranga tarpusavyje.\nŠalia branduolio yra ir kita programinė įranga, kuri leidžia tau naudotis prietaisu - tai įvairiausios programos, pvz., skambinimo programėlė, kalkuliatorius, interneto naršyklė. Visa ši programinė įranga kartu su branduoliu sudaro operacinę sistemą (angl - operating system, arba - OS).\nTaigi operacinė sistema (OS) yra programinė įranga, kuri valdo kompiuterinės įrangos ir programų išteklius. Ji veikia kaip tarpininkė tarp vartotojo ir kompiuterio aparatūros. Pagrindinės populiarios operacinės sistemos yra Windows, macOS, ir Linux.\n\nWindows: Microsoft korporacijos sukurta populiariausia operacinė sistema, naudojama tiek namų, tiek verslo kompiuteriuose. Ji žinoma dėl savo patogumo ir plataus programų pasirinkimo.\nmacOS: Apple korporacijos operacinė sistema, naudojama Mac kompiuteriuose. Ji žinoma dėl savo dizaino, stabilumo ir integracijos su Apple ekosistema.\nLinux: Atviro kodo operacinė sistema, kurią gali keisti ir dalintis visi norintys. Ją naudoja dauguma serverių ir technologijų entuziastų.",
    "crumbs": [
      "Įvadas"
    ]
  },
  {
    "objectID": "index.html#ubuntu-skoniai",
    "href": "index.html#ubuntu-skoniai",
    "title": "Linux vaikams ir pradedantiesiems",
    "section": "Ubuntu skoniai",
    "text": "Ubuntu skoniai\nLinux yra atviro kodo operacinė sistema, todėl ją gali keisti ir dalintis visi norintys. Dėl to yra nemažai programuotojų, kurie nusprendžia pasidalinti savo pagamintais Linux variantais, vadinamais distribucijomis.\n\n\n\nLinux distribucijų medis\n\n\nKai tu įjungi telefoną arba kompiuterį, branduolys užtikrina, kad visi kompiuterio komponentai galėtų tarpusavyje bendrauti. Vis dar trūksta programų, kurios rodytų vaizdus ekrane, leistų įvesti tekstą ir pan. Tam yra reikalingos papildomos programos, dauguma jų buvo sukurtos GNU projekto metu. Tačiau tik branduolys ir GNU programos dar neleistų visavertiškai naudotis kompiuteriu, todėl papildomai diegiamos įvairios reikalingos programos, kurios padaro operacinę sistemą praktiška ir gražiai atrodančia.\nTaigi, pilną operacinę sistemą, dar kartais vadinamą Linux distribucija (distribution), sudaro:\n\nLinux branduolys (kernel)\nGNU programos\nPapildomos programos ir grafinis dizainas",
    "crumbs": [
      "Įvadas"
    ]
  },
  {
    "objectID": "index.html#kodėl-linux",
    "href": "index.html#kodėl-linux",
    "title": "Linux vaikams ir pradedantiesiems",
    "section": "Kodėl Linux",
    "text": "Kodėl Linux\nGrįžkime prie klausimo - “Kodėl Linux”?\n\nSaugumas: Linux dažnai laikoma saugesne operacine sistema dėl savo architektūros ir mažesnio virusų kiekio.\nServeriai: Linux arba jai giminingos UNIX sistemos veikia beveik visuose pasaulio serveriuose. Greičiausiai net tavo namuose yra ne vienas įrenginys, kuriame veikia Linux.\nUniversalumas: tiek iOS, tiek Android taip pat veikia UNIX pagrindu.\nLankstumas ir pritaikomumas: Linux leidžia tau būti labiau savarankiškam ir geriau suprasti, kaip veikia kompiuteriai. Tuo pačiu metu išmoksti dalykų, kurių nemoka kiti.\nProgramavimas: Linux yra gera pradžia kelionei į Python ir kitas programavimo kalbas, kurios naudojamos programuojant robotus, kuriant interneto svetaines ar atliekant skaičiavimus su dideliais duomenų kiekiais.\n\nŠiais laikais vis daugiau ir daugiau profesijų kasdienėje veikloje reikia programavimo. Buhelteriai naudojasi Python,kad greičiau apdorotų duomenis. Architektai ir inžinieriai, kad teisingai apskaičiuotų pastato konstrukcijas. Transporto srauto specialistai, kad planuotų ir valdytų automobilių srautus, o NASA darbuotojai, kad valdytų į kosmoosą kylančias raketas.\nTaigi Linux ir tam tikra prasme - programavimas, paruošia tave 21-ajam amžiui.\nNegana to, Linux veikia ant tokių paprastų mikrokompiuterių kaip Raspberry Pi Zero ir gali atgaivinti net 10-20 metų senumo nešiojamą kompiuterį. Taigi, tai padeda tausoti gamtą, nes savo technika gali naudotis ilgiau.\nBet yra ir kita medalio pusė. Ne visos tavo įprastos programos veikia Linux. Pavyzdžiui, Adobe produktai tiesiog neveikia Linux aplinkoje. Microsoft Excel ir Word taip pat nėra pritaikyti Linux. Jei tavo mokslui ar darbui yra būtinos tam tikros programos, Linux gali neatitikti tavo lūkesčių. Tačiau reikia žinoti, kad daugelis šių programų turi analogus Linux aplinkoje. Dažniausiai jie yra atviro kodo ir nemokami.",
    "crumbs": [
      "Įvadas"
    ]
  },
  {
    "objectID": "index.html#linux-mint",
    "href": "index.html#linux-mint",
    "title": "Linux vaikams ir pradedantiesiems",
    "section": "Linux Mint",
    "text": "Linux Mint\nKaip jau minėjau, yra daug Linux distribucijų. Šiame vadovėlyje naudosime vieną iš paprasčiausių - Linux Mint distribuciją, kuri sukurta Ubuntu pagrindu.\nJą galima parsisiųsti iš linuxmint.com. Kaip ją instaliuoti, gali šiek tiek skirtis priklausomai nuo kompiuterio, tad geriausia šioje vietoje tiesiog paieškoti vaizdo įrašo Youtube svetainėje.",
    "crumbs": [
      "Įvadas"
    ]
  },
  {
    "objectID": "1_linux_configure.html",
    "href": "1_linux_configure.html",
    "title": "1  Linux konfiguracija",
    "section": "",
    "text": "2 Intro\nŠiame skyriuje mes susipažinsime su Linux Mint 22 operacine sistema ir padarysime ją truputi gražesne. Kartu mes susupažinsime su tam tikrais kompiuterio terminais (t.y. pavadinimais), tai padės ateityje greičiau orientuotis.\n\n\n3 Themes\n\n\n4 Backgrounds\n\n\n5 Menu\n\n\n6 Panel\n\n\n7 Firewall\n\n\n8 Languages\n\n\n9 Keyboard\n\n\n10 Time\n\n\n11 Tips & Tricks",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Linux konfiguracija</span>"
    ]
  },
  {
    "objectID": "2_linux_intro_terminal.html",
    "href": "2_linux_intro_terminal.html",
    "title": "2  Susipažinkime su Terminal",
    "section": "",
    "text": "3 Slapta žinutė\nLabas! Aš turiu tau slaptą žinutę:\nSmVpZ3UgdGF1IHBhdGlrbywgZ2FsIG5vcmkgdMSZc3RpIGlyIG1va3l0aXMgcHJvZ3JhbXVvdGkg bnVvIHJ1ZGVucz8K\nDabar tu galvoji, ką šis kodas gali reikšti? Tavo kompiuteris gali tau padėti dekoduoti šią žinutę!\nBet kad kopiuteris tau padėtų - pirma turi išmokti su juo kalbėtis. Ši pamoka ir bus apie tai kur ir kaip kalbėtis su kompiuteriu.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Susipažinkime su Terminal</span>"
    ]
  },
  {
    "objectID": "2_linux_intro_terminal.html#pažink-terminalą",
    "href": "2_linux_intro_terminal.html#pažink-terminalą",
    "title": "2  Susipažinkime su Terminal",
    "section": "4.1 Pažink Terminalą",
    "text": "4.1 Pažink Terminalą\nTau atsidarys toks baisus juodas langas. Bet tau jo visai nereikia bijoti. Čia tik langas, per kurį gali bendrauti su kompiuteriu, pasakant jam, ką tu nori, kad jis padarytų.\n\nTerminalas yra speciali programa tavo kompiuteryje, panaši į žaidimų platformas kaip Roblox ar YouTube. Tačiau vietoje to, kad žaidžiame ar žiūrėtume vaizdo įrašus, į ją rašome komandas - įsakymus kompiuteriui.\nKomandos yra būdas pasakyti kompiuteriui, ką jam daryti. Kadangi kompiuteris negali suprasti lietuviškai arba angliškai, jam reikia specialios kalbos. Viena iš tokių kalbų yra BASH.\nBASH (tariasi beeš) yra speciali kompiuterinė kalba, kurią naudojame bendraudami su terminalo programa. Ji leidžia mums rašyti ir vykdyti įsakymus arba komandas, kad galėtume valdyti kompiuterį. Panašiai kaip žmonės kalba skirtingomis kalbomis (pvz., lietuvių arba anglų), BASH yra mūsų būdas bendrauti su kompiuteriu, leidžiantis mums atlikti daug įvairių veiksmų - nuo paprastų failų valdymo iki sudėtingesnių komandų vykdymo.\nKitaip tariant, BASH yra kalba, kuri leidžia mums parašyti ir suprasti komandas, kurios padeda mums dirbti su kompiuteriu ir atlikti norimus veiksmus per terminalą.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Susipažinkime su Terminal</span>"
    ]
  },
  {
    "objectID": "2_linux_intro_terminal.html#pirma-komanda---echo",
    "href": "2_linux_intro_terminal.html#pirma-komanda---echo",
    "title": "2  Susipažinkime su Terminal",
    "section": "4.2 Pirma Komanda - echo",
    "text": "4.2 Pirma Komanda - echo\nPasiraitokime rankoves ir kibkime į darbą.\nPirmoji komanda (įsakymas kompiuteriui) bus - echo. Komanda echo atspausdina po jos sekantį tekstą.\nPabandykime pasisveikinti. Atkartok šią komandą terminale:\necho \"Labas rytas\"\nir tada nuspausk Enter klavišą. iš tiesų jų yra net 2! Ir kartais jie dar vadinami return, nes senovinėse spausdinimo mašinose jie gražindavo (angl. - return) eilutę į praždią.\n\n\nAr pastebėjai, kas nutiko? Kompiuteris tave išgirdo ir pakluso tavo komandai.\n\n\n4.2.1 Kas čia yra Kas?\n\nMatai šitą dolerio ženklą $? Jis angliškai vadinamas prompt ir reiškia, kad kompiuteris yra pasirengęs gauti iš tavęs komandą ir laukia jos.\n\n\n\necho yra komanda, kuri priima tekstą ir jį atspausdina. Ji gali atspausdinti čia, ekrane (terminale), bet gali ir atspausdinti kažkur kitur, pvz., nukreipiant tekstą į kokį nors failą. Kaip komanda žino, ką spausdinti? Ji priima argumentą. Argumentas – tai, ką tu pasirenki duoti tai komandai. Šiuo atveju argumentas yra tekstas tarp abiejų kabučių \"Labas rytas\".\n\n\n\nArgumentas – tarsi maisto produktas, kurį įdedi į maisto gaminimo įrenginį. O echo – tarsi maisto gaminimo įrenginys, kuris tą produktą apdoroja ir pagamina kažką skanaus.\n\n\nKaip matai, sekančioje eilutėje nėra $ ženklo. Nes toje eilutėje kompiuteris atsakė tau :)\n\nKai jis tai padarė, vėl pasiruošė tavęs klausyti, nes paruošė kitą eilutę, kurioje paliko prompt ženklą - $ ir laukia naujos tavo komandos.\n\n\n4.2.2 Challange:\nDabar visišai savarankiškai atspausdink žemiau pateiktą tekstą:\nLabas rytas suraitytas, meškos koja parašytas!\nPagalba:\n\nNaudok komandą echo.\nTekstas turi būti apsuptas kabutėmis \"......\".\nKad paleistum komandą – spausk Enter klavišą.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Susipažinkime su Terminal</span>"
    ]
  },
  {
    "objectID": "2_linux_intro_terminal.html#teksto-nukreipimas-į-failą--",
    "href": "2_linux_intro_terminal.html#teksto-nukreipimas-į-failą--",
    "title": "2  Susipažinkime su Terminal",
    "section": "4.3 Teksto nukreipimas į failą - >",
    "text": "4.3 Teksto nukreipimas į failą - &gt;\nŠaunu! Judam toliau… Dabar pabandysime tai, ką tau kompiuteris atspausdino į Terminal langą, nukreipti į failą. Ką tai reiškia? Tai reiškia, jog kompiuteris neatspaudins teksto Terminal lange, vietoj to, jis sukurs failą ir patalpins tavo norimą tekstą į jo vidų. Taip tavo tekstas gali būti išsaugotas. Išsaugoti angliškai - save.\nNukreipimas į failą įvyksta naudojant &gt; simbolį. Po šio simbolio seka failo pavadinimas, į kurį nurime nukreipti tekstą. Tačiau šis simbolis yra galingas bet ir pavojingas! Jis sukuria failą, jeigu to failo dar nėra, bet jeigu failas tokiu pat pavadinimu jau yra, jis jį perrašo.\nPabandyk:\necho \"Labas rytas, katine\" &gt; pasaka.txt\n\necho yra komanda.\n\"Labas rytas, katine\" yra argumentas skirtas echo komandai.\n&gt; nukreipia tai, kas įvyko prieš tai į failą\npasaka.txt yra failo pavadinimas, kurė sukuriame ir į kurį įrašome tekstą.\n\nJeigu viską padarei teisingai, tavo langas turėtų atrodyti taip:\n\nKompiuteris ir vėl laukia tavo komandos. Bet kur atsirado failas?",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Susipažinkime su Terminal</span>"
    ]
  },
  {
    "objectID": "2_linux_intro_terminal.html#failų-naršyklė---files",
    "href": "2_linux_intro_terminal.html#failų-naršyklė---files",
    "title": "2  Susipažinkime su Terminal",
    "section": "4.4 Failų naršyklė - Files",
    "text": "4.4 Failų naršyklė - Files\nMatai, kompiuteris įvykdė komandą ir vėl tavęs klauso! Bet kur nuėjo tas “Labas rytas, katine!”? Juk jo nėra Terminal lange? Kad rasti, atsidaryk naują programą, šį kartą paieškoje įvesk „Files“.\n\nTau atsidarė failų naršyklė, angliškai dažnai vadinama „File Explorer“.\nPažiūrėkime, ką čia matome…\n\nMatome daug aplankų: Desktop, Documents, Downloads ir jie atsikaroja dešinėje pusėje\nBet štai ir failas pasaka.txt!\n\n\nPaspausk ant pasaka.txt du kartus su pele, jis tau atsidarys su teksto redagavimo programa.\n\nUždaryk visus visus ir pasiruošk nedideliam challange!\n\n4.4.1 Challange\n\nIš naujo atsidaryk Terminal langą\nNaudojantis echo ir &gt; išsaugok šį tekstą\n\nLietuva, Tėvyne mūsų Tu didvyrių žeme, Iš praeities Tavo sūnūs Te stiprybę semia.\n\nIšsaugok tekstą faile pavadinimu himnas.txt\nAtsidary Files programą, rask himnas.txt\nAtsidaryk failą ir patvirtink, jog iš tiesų išsaugojai Lietuvos himno pimąją eilutę.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Susipažinkime su Terminal</span>"
    ]
  },
  {
    "objectID": "2_linux_intro_terminal.html#komanda---cat",
    "href": "2_linux_intro_terminal.html#komanda---cat",
    "title": "2  Susipažinkime su Terminal",
    "section": "4.5 Komanda - cat",
    "text": "4.5 Komanda - cat\nDabar tau gali kilti klausimas, o kodėl reikėjo atsidaryti šitą failą taip komplikuotai. Negi nėra paprastesnio būdo?\nYRA!\nTerminale įrašyk komandą cat ir perleisk jai argumentą – failo pavadinimą, kurį cat komanda turi perskaityti! Paspausk Enter klavišą.\ncat pasaka.txt\nKą matai?\n\nNieko sau! cat komanda perskaitė tavo failą ir jį atspausdino Terminal lange. Tau nereikėjo eiti į Files susirasti ir atsidaryti failo. Tu viską gali padaryti Terminal lange.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Susipažinkime su Terminal</span>"
    ]
  },
  {
    "objectID": "2_linux_intro_terminal.html#teksto-nukreipimas-į-failą---1",
    "href": "2_linux_intro_terminal.html#teksto-nukreipimas-į-failą---1",
    "title": "2  Susipažinkime su Terminal",
    "section": "4.6 Teksto nukreipimas į failą - >>",
    "text": "4.6 Teksto nukreipimas į failą - &gt;&gt;\nPameni minėjau, jog &gt; sukuria failą, jeigu jo nėra, o jeigu jis jau yra, tada perrašo jį. Dėl to ši komanda yra gana pavojinga.\nPabandyk nusiųsti šį tekstą į pasaka.txt\necho \"Labas maužyle\" &gt; pasaka.txt\no tada atspausdinti pasaka.txt terminale:\ncat pasaka.txt\nO ne, dingo prieš tai buves tekstas :(\n\nTam kad neperrašyti failo, o tik pridėti naują eilutę failo apačioje, galima naudoti &gt;&gt; t.y. dvigubas &gt;.\n\n\n4.6.1 Challange\nPraėjusiam challange tu įrašei pirmą Lietuvos himno posmą. Tad dabar antrojo posmo eilė:\nTegul Tavo vaikai eina Vien takais dorybės Tegul dirba Tavo naudai Ir žmonių gėrybei.\n\nPirma pasitikrink su komanda cat ar tikrai turi failą himnas.txt ir ar jame tik pirmo posmo tekstas?\nNaudojant echo ir &gt;&gt; pridėk antro posmo tekstą\nSu komanda cat pasitikrink ar tikrai abu posmai išsisaugojo.\nJeigu eilutės neatrodo gražiai pasidink terminalo langą ir pakartok komandą",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Susipažinkime su Terminal</span>"
    ]
  },
  {
    "objectID": "2_linux_intro_terminal.html#naudingi-klavišų-trumpiniai-shortcuts",
    "href": "2_linux_intro_terminal.html#naudingi-klavišų-trumpiniai-shortcuts",
    "title": "2  Susipažinkime su Terminal",
    "section": "4.7 Naudingi klavišų trumpiniai (shortcuts):",
    "text": "4.7 Naudingi klavišų trumpiniai (shortcuts):\nDvi komandos, kurias turi išmokti čia ir dabar:\n\nPaspaudus du klavišus vienu metu CTRL ir L, Terminal langas išsivalo ir tu nebematai senų komandų.\nKartais tu gali įrašyti kažką neteisingai, padaryti klaidą ir kompiuteris gali nesuprasti. Tada geriausia nuspausti CTRL ir C klavišus. Tai įpareigoja kompiuterį nutraukti tavęs klausymąsi, ištrinti tai, ką dabar darai, ir pradėti klausytis vėl iš naujo.\n\nPabandyk:\nPirma įrašyk echo “Labas rytas bet neužbaik teksto įvedimo, nepadėk kabučių ir spausk Enter. Dabar vietoj atspausdinto teksto arba vietoj prompt $ matai šitą ženklą &gt;. Jis reiškia, kad kompiuteris laukia, kol tu pabaigsi įrašyt tekstą. Spaudžiant Enter – nieko nesigauna.\nNuspaudus CTRL + C nutrūksta komandos įrašymas.\nTaip pat, jeigu žinai ko trūksta, šiuo atveju užaryti tekstą kabutėmis, gali įrašyti ir spausti Enter.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Susipažinkime su Terminal</span>"
    ]
  },
  {
    "objectID": "2_linux_intro_terminal.html#slaptos-žinutės-dekodavimas",
    "href": "2_linux_intro_terminal.html#slaptos-žinutės-dekodavimas",
    "title": "2  Susipažinkime su Terminal",
    "section": "4.8 Slaptos Žinutės Dekodavimas:",
    "text": "4.8 Slaptos Žinutės Dekodavimas:\nNa štai, išmokai naudotis terminalu, žinai kas yra komanda, argumentas. Taip pat moki nukreipti tekstą į failą. Moki pakankamai, jog dekoduoti paslaptingą žinutę!\n\nPasinaudok komanda echo ir kaip jos argumentą įrašyk mano slaptą žinutę (su pele pažymėk visą kodą, paspausk dešinį pelės mygtuką ir spausk ant COPY). Tada terminale po echo ” su pele spausk ant terminalo, tada paspausk dešinį mygtuką ir spausk ant PASTE. Tačiau dar nespausk ENTER, nepamiršk, jog čia tekstas, kurį reikia uždaryti su “, kad jis niekur nepabėgtų :)\nIšsaugok visa tai pasinaudodama &gt; ir sukuriant failą pavadinimu kodas.txt.\nGali pasitikrinti, ar kodas.txt tikrai turi slaptą žinutę, pasinaudodama cat komanda ir perleisdama jai argumentą kodas.txt.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Susipažinkime su Terminal</span>"
    ]
  },
  {
    "objectID": "2_linux_intro_terminal.html#šifravimo-komanda---base64",
    "href": "2_linux_intro_terminal.html#šifravimo-komanda---base64",
    "title": "2  Susipažinkime su Terminal",
    "section": "4.9 Šifravimo komanda - base64",
    "text": "4.9 Šifravimo komanda - base64\nNa, o dabar belieka pasinaudoti dar viena komanda:\nKomanda base64 moka koduoti ir dekoduoti. -d yra parametras ir reiškia dekoduoti. kodas.txt yra argumentas, tavo anksčiau sukurtas failas, kurio viduje yra kodas.\n\nParametras yra papildomas nustatymas komandai base64. Įsivaizduok komanda būtų kaip įsakymas “Kepti orkaitėje”, o paramtetras “nustačius 200 laispnių temperatūrą”.\n\nbase64 -d kodas.txt\nAr pavyko dekoduoti mano žinutę?",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Susipažinkime su Terminal</span>"
    ]
  },
  {
    "objectID": "3_linux_update.html",
    "href": "3_linux_update.html",
    "title": "3  Linux programos ir atnaujinimai",
    "section": "",
    "text": "4 Pradžia\nVisuose kompiuteriuose yra daugybė įvairių programų. Pavyzdžiui, jau susipažinome su Terminal ir Files programomis. Taip pat išmokome naudoti kai kurias įdiegtas komandas: echo, cat, ir base64. Šių programų kūrėjai dažnai atnaujina savo programas, tad norėdami pasinaudoti naujausiomis funkcijomis ir pataisymais, turime įdiegti šiuos atnaujinimus (angl. - update).\nŠioje pamokoje sužinosime:\nBe to, išmoksime:\nŠis skyrius padės išmokti, kaip efektyviai tvarkytis su programomis ir jų atnaujinimais, kad kompiuteris visada būtų naujausias ir veiktų be trikdžių.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Linux programos ir atnaujinimai</span>"
    ]
  },
  {
    "objectID": "3_linux_update.html#update-manager",
    "href": "3_linux_update.html#update-manager",
    "title": "3  Linux programos ir atnaujinimai",
    "section": "4.1 Update Manager",
    "text": "4.1 Update Manager\nUpdate Manager yra programa, kuri padeda atnaujinti kitas programas tavo kompiuteryje. Ji pati praneša, kai laikas atnaujinti programas. Kai internete yra prieinami atnaujinimai, dešiniame kampe atsiranda skydelio su raudonu tašku piktograma (raudonas taškas reiškia, kad yra naujų atnaujinimų).\n\n\nBet jei nematai šios piktogramos, gali paleisti “Update Manager” programą per Menu:\n.\nPirmą kartą paleidus šią programą, gali pamatyti tokį langą, kuris paaiškina, ką ji daro. Drąsiai spausk ant OK.\n\nJei pamatysi, kad pačiai programai reikia atnaujinimo, spausk ant “Apply the Update” (lt. - įdiegti atnaujinimą). Taip pat gali matyti užrašą switch to a local mirror, kol kas spausk No. Kas yra veidrodžiai (angl. - mirrors), pakalbėsime netrukus.\n\nJei paspaudus “Apply the Update” kompiuteris paprašys tavo slaptažodžio, įvesk jį. Taip kompiuteris įsitikina, kad tik tu ar kitas vartotojas, kuriam priklauso šis kompiuteris, gali atlikti pakeitimus. Drąsiai įvesk savo slaptažodį ir spausk Authenticate (lt. - patvirtinti tapatybę).\n\nNetrukus pamatysi vaizdą, kuris gali atrodyti panašiai - vienas ar keli, o gal net daugybė skirtingų programų atnaujinimų, kuriuos gali įdiegti savo kompiuteriui. Tačiau kol kas dar nieko nespauskime. Susipažinkime su tuo, ką čia matome:\n\n\n\nType - kokio tipo yra atnaujinimas? Jie gali būti:\n\nSecurity update - saugumo atnaujinimas. Jo simbolis yra skydelis. Tai svarbiausias atnaujinimas, kurį reikia kuo skubiau įdiegti, kad kompiuteris būtų saugus.\nKernel update - pagrindinės Linux sistemos atnaujinimas. Jo simbolis yra žaibas. Šie atnaujinimai pagerina, kaip veikia pats kompiuteris. Ar ekranas rodo gerai? Ar veikia pelė? Ir t.t.\nSoftware update - programų atnaujinimai. Tai atnaujinimai, kuriuos programų kūrėjai sukuria, kad jų programos veiktų geriau, turėtų daugiau funkcijų ir pan.\n\n\nŠiame lange taip pat gali paspausti ant:\n\n\nClear - išvalyti visus pasirinktus atnaujinimus\nSelect All - pasirinkti visus atnaujinimus\nRefresh - atnaujinti sąrašą atnaujinimų, kurie yra prieinami\nInstall Updates - įdiegti pasirinktus atnaujinimus\n\nBet kaip kompiuteris žino, kokias programas atnaujinti? Ir iš kur jis jas atsisiunčia?\n\n4.1.1 Mirrors ir Updates\nVeidrodėli, veidrodėli, kas pasaulyje gražiausia?\n\nPradėkime nuo pradžių…\nĮsivaizduok, kad programuotoja, kuri kuria programas, dirba iš namų, kaip ir tu. Po ilgos darbo savaitės, ji nusprendžia: “Viskas, programos atnaujinimas paruoštas. Ištaisyta klaida, įdiegti nauji patobulinimai”.\n\n(Nuotraukoje Jaime Gunther, kuri 38 metų nusprendė, kad mokysis savarankiškai programuoti ir tapo programuotoja)\nBet dabar įsivaizduok, kad keli milijonai žmonių bandytų parsisiųsti iš jos kompiuterio šiuos atnaujinimus. Jos kompiuteris negalėtų to atlaikyti, ir viskas strigtų bei vyktų labai lėtai.\nTodėl programuotoja naudoja serverius veidrodžius (angl. - mirrors).\n\nKas yra serveris? Serveris yra didelis kompiuteris, kuris pastatytas specialiose vietose ir gali aptarnauti milijonus žmonių vienu metu. (daugiau nuotraukų gali rasti čia)\n\n\n\nKodėl jie vadinami veidrodžiais (angl. - mirrors)? Nes jie atspindi tuos programinius pakeitimus, kuriuos programuotoja padarė savo namuose. Kai ji kažką atnaujina, šie serveriai iškart tai atspindi, ir tu gali parsisiųsti atnaujinimus neapkraudamas programuotojos namų kompiuterio!\n\nDabar kyla klausimas, o kaip tavo kompiuteris žino, iš kurio serverio parsisiųsti? Tavo kompiuteryje yra kodas, kuris turi sąrašą, kaip rasti visus šiuos serverius.\nNuo to, kaip toli serveris nuo tavęs, priklauso programų ir atnaujinimų parsisiuntimo greitis. Todėl labai svarbu kartais pasitikrinti ar pasirinkti artimiausi serveriai. Būtent dėl šios priežasties kartais tavo kompiuteris paklausia, ar nori prisijungti prie vietinių veidrodinių serverių - “Do you want to switch to a local mirror?”\nDabar kyla klausimas, o kaip tavo kompiuteris žino, iš kurio serverio parsisiųsti? Tavo kompiuteryje yra kodas, kuriame yra sarašas kaip rasti visus šiuos serverius.\nNuo to, kaip toli serveris nuo tavęs nutolęs, priklauso prgramų ir atnaujinimų parsisiuntimo greitis. Todėl labai svarbu kartais pasitiktrinti, ar pasirinkti artimiausi serveriai. Būtent dėl šios priežasies, kartais tavo kompiuteris paklausia, ar nori prisijngti prie lokalių veidrodžių.\nKaip tai padaryti?\n\nSpausk ant “Edit” (pakeitimai) ir tada ant “Software Sources” (programų šaltiniai).\nKompiuteris vėl paprašys tavo slaptažodžio, įvesk jį.\nAtsidariusiame naujame lange pamatysi Main ir Base veidrodžius. Jie gali būti nustatyti ne visai ten, kur gyveni tu.\nSpustelk pele prie Main. Atsidarys langas, kuriame bus serveriai, surūšiuoti pagal tai, kaip arti tavęs jie yra (pagal atsisiuntimo greitį). Tu pamatysi, kad po kelių sekundžių sąrašo viršus nebekinta. Tau nereikia laukti, kol kompiuteris parsisiųs visų serverių informaciją. Pasirink patį pirmą serverį\nPakartok tai su Base serveriu.\nSpustelk ant “Update the mirrors” (atnaujinti veidrodinius serverius). Tai gali truputį užtrukti.\nAtnaujinus, pamatysi, kad buvusius serverius pakeitė kiti, tavo pasirinkti serveriai.\nDabar gali uždaryti šį langą.\n\nVisas procesas šiame video:\nVideo\nDabar gali atnaujinti programas, paspaudus ant Install Updates. Gali atsirasti papildomi langai, kur paklaus, ar tikrai nori įdiegti atnaujinimus, gali paprašyti ir įvesti tavo slaptažodį dar kartą. Visur drąsiai sakyk “taip” ir įrašyk savo slaptažodį.\nTačiau yra ir kitas būdas! Naudojant Terminal.\nVeidrodinių serverių atnaujinimas yra būtinas net kai įdiegi atnaujinimus per Terminalą. Tad retkarčiais pasitikrink, ar pasirinkti vis dar sparčiausi veidroriniai serveriai.\n\n\n4.1.2 Atnaujinimų instalivimas per Terminal\nKodėl kartais geriau įdiegti atnaujinimus per Terminal programą? Visų pirma - tu praktikuojiesi BASH kalbos žinias! Visų antra, vėliau išmoksi, kaip vos kelių klavišų paspaudimu tai padaryti daug greičiau nei spaudant su pele ir naudojant Update Manager programą.\nŠtai taip atrodo kodas, kurį reikės įrašyti:\nsudo apt update && \nsudo apt full-upgrade -y && \nsudo apt autoremove -y && \nflatpak update\nDabar tavo galvoje gal atrodo taip:\n\nPradėkime nuo pradžių ir eikime per visas komandas, kad jas suprastume. Kai suprasi - pamatysi, kad viskas gana paprasta.\nMes galime visas komandas surašyti į vieną eilutę, bet paprastumo dėlei, terminale įrašyk komandą po komandos, kaip pateiktia žemiau.\n\nsudo apt update.\n\n\nčia iššaukiama komanda apt. Tai yra programa, kuri rūpinasi programų atnaujinimu.\nupdate yra argumentas, ką programa turi daryti. Priešingai nei atrodo, ji neatnaujina programų. Ką ji padaro, tai palygina tavo kompiuterio programas su tuo, kas yra veidrodiniuose serveriuose (mirror). Jeigu ji aptinka skirtumą, nes, pvz., serveryje programa yra naujesnė, apt tave informuos apie galimus atnaujinimus.\nO kas yra sudo? Atsimeni, kai Update Manager tavęs prašė įrašyti tavo slaptažodį? Kai tu jį įrašydavai, kompiuteris suprasdavo, jog tu turi kompiuterio administratoriaus teises. sudo padaro tą patį. Ši komanda pasako, kad po jo sekantis kodas būtų įvykdytas su kompiuterio administratoriaus teisėmis ir apsaugo, kad svetimi žmonės nieko negalėtų padaryti tavo kompiuteriui.\n\nSpausk Enter. Paleidus šią komandą, Terminal tavęs paprašys įrašyti savo slaptažodį. Jį rašant tu nieko nematysi (juk nenori, kad sėdint kavinėje, kas nors pamatytų tavo slaptažodį?). Įvesk ir spausk Enter dar kartą. Jeigu savo slaptažodį įvesi neteisingai - terminalas tau tai pasakys, tad galėsi bandyti dar kartą.\nJeigu tavo kompiuteriui yra pasiekiami atnaujinimai - tu pamatysi, kiek jų.\n\n\nsudo apt full-upgrade -y.\n\n\nŠi dalis pasako, kad sudo - elkis kaip administratorius\napt naudok programų atnaujinimų programą.\nfull-upgrade - atnaujink visas programas.\n-y yra nustatymas, panašus į ką jau matėme su base64 -d, tik šį kartą jis reiškia yes (lt - taip). Jeigu jo nepanaudotum, Terminal programa tavęs paklaustų, kokius atnaujinimus siūlo padaryti ir dar kartą klaustų, ar tikrai nori viską įdiegti. Tam kad išvengti šio papildomo klausimo, iš karto pasakome - yes.\n\nJeigu tu rašai šią komandą iškart po to, kai jau naudojai sudo apt update, Terminal programa tavęs gali ir nebeprašyti dar kartą įrašyti savo slaptažodį.\nPriklausomai nuo to, kiek yra atnaujinimų, šis procesas gali užtrukti kelioliką sekundžių, bet gali ir kelioliką minučių.\nVideo\n\nsudo apt autoremove -y.\n\n\nsudo ir apt jau žinome.\nauto-remove - šis nustatymas pasako apt komandai, kad jeigu yra kažkokių programų, kurios po atnaujinimo nebereikalingos, jas ištrintų. Nebijok, apt programa yra labai protinga ir atsargiai atsirenka, ką trinti ir ko ne.\n-y nustatymas pasako yes (taip), kad nereiktų patvirtinimo.\n\n\n\nflatpak update - kiek kita komanda. Čia mes iššaukiame programą flatpak, kuri, kaip ir programa apt, moka instaliuoti programas. Tačiau ją atnaujinti užtenka vos šių dviejų žodžių.\n\n\n\nO ką gi reiškia && toje ilgoje komandoje? Kai mes rašome komandas po vieną, kaip padarėme dabar, mes patys matome, ar nutiko kas nors netikėto, ar įvyko kokia nors klaida ir t.t. Tam, kad kompiuteris žinotų, jog tik padarius sudo apt update ir negavus jokių klaidų, jis eitų prie sekančios komandos sudo apt full-upgrade -y ir taip toliau, reikia šias komandas sujungti su &&. Jeigu prieš tai buvusi komanda nepavyktų, kompiuteris nutrauktų visas likusias komandas.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Linux programos ir atnaujinimai</span>"
    ]
  },
  {
    "objectID": "3_linux_update.html#sisteminių-paketų-instaliavimas",
    "href": "3_linux_update.html#sisteminių-paketų-instaliavimas",
    "title": "3  Linux programos ir atnaujinimai",
    "section": "5.1 Sisteminių paketų instaliavimas",
    "text": "5.1 Sisteminių paketų instaliavimas\nSisteminis paketas (angl. System Package) - tai programa, kurią Linux kūrėjai patikrino ir pritaikė tavo kompiuterio veikimui. Šios programos valdomos per apt programą.\nKita programų instaliavimo sistema yra Flatpak, su ja susipažinsime vėliau.\nĮdiekime “Bloboats” žaidimą.\nPaieškos viršuje įrašyk Bloboats ir paspausk ant programos piktogramos.\n\nKaip matai, sekantis langas parodo, jog tai System Package ir leidžia tau šią programą įdiegti. Spausk ant Install.\n\nSoftware Manager programa informuos tave, jei reikia įdiegti papildomas programas.\n\nJei taip nutiktų, spausk ant Continue, o tada įrašyk savo slaptažodį ir spausk ant Authenticate. Prisimeni, kai tu įrašai savo slaptažodį, kompiuteris komandas vykdo kaip sudo :)\n\nDabar gali spausti ant Launch (lt - paleisti), arba rasi šią programą tarp visų programų.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Linux programos ir atnaujinimai</span>"
    ]
  },
  {
    "objectID": "3_linux_update.html#sisteminių-paketų-įdiegimas-terminal-lange",
    "href": "3_linux_update.html#sisteminių-paketų-įdiegimas-terminal-lange",
    "title": "3  Linux programos ir atnaujinimai",
    "section": "5.2 Sisteminių paketų įdiegimas Terminal lange",
    "text": "5.2 Sisteminių paketų įdiegimas Terminal lange\nSusiraskime kitą programą - 3dchess. Kaip matai, jos pavadinimas kompiuteriui yra parašytas šio lango apačioje:\n\nAtsidaryk terminalą ir įrašyk šią komandą, daug kas jau tau bus matyta:\nsudo apt install 3dchess\nPaaiškinkime, kas čia yra kas:\n\nsudo - pakelia tavo teises iki administratoriaus ir leidžia įdiegti programas.\napt - programa, kuri įdiegia, atnaujina ir pašalina programas.\ninstall - komanda, pasakanti apt, ką turi daryti, šįkart įdiegti naują programą.\n3dchess - argumentas, pasakantis, kokią programą įdiegti.\n\nMes taip pat galėjome pridėti -y, bet šįkart to nepadarysime. Pažiūrėkime, kas nutinka. Ar pastebėjai kompiuterio reikalavimą patvirtinti, jog tikrai nori instaliuoti šią programą? Do you want to Continue [Y/n]\nVideo\nKaip matai, kompiuteris manęs klausė, ar tikrai noriu, ir teko įrašyti Y raidę ir spustelėti Enter. Tiesa, kai matai [Y/n] tai reiškia, kad jeigu tiesiog paspausi Enter - kompiuteris galvos, kad tu renkiesi Y (Yes trumpinys), tad rašyti Yes tau net nereikia. Kartais tu gali pamatyti [N/y]. Taigi tas pasirinkimas, kuris parašytas didžiąja raide - bus automatiškai pasirinktas jeigu nieko neįrašysi, bet pasupausi Enter klavišą.\nJeigu būčiau įrašęs komandą\nsudo apt install 3dchess -y\nTerminal programa manęs neprašytų patvirtinti mano pasirinkimo. Nes priejus šiam klausimui Do you want to Continue [Y/n], nustatymas -y pasakytų iškart Yes.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Linux programos ir atnaujinimai</span>"
    ]
  },
  {
    "objectID": "3_linux_update.html#flatpak",
    "href": "3_linux_update.html#flatpak",
    "title": "3  Linux programos ir atnaujinimai",
    "section": "5.3 Flatpak",
    "text": "5.3 Flatpak\nFlatpak yra kitoks būdas instaliuoti programas. Kai tu instaliuoji Flatpak programą, tu atsisiunti ne tik pačią programą, bet ir visas kitas programas, kurios reikalingos, kad pagrindinė programa veiktų. Pabandykime tai paaiškinti kitaip.\nĮsivaizduok, kad tavo kompiuteris yra kaip namas. Namai turi kambarius, virtuvę, vonią ir t.t. Dabar įsivaizduok, kad nori naujos spintos. Kai tu parsisiunti spintą kaip System Package (sisteminį paketą), tai tarsi parsiveži ją iš IKEA parduotuvės ir pastatai savo kambaryje.\nFlatpak programos veikia kitaip. Kai tu atsisiunti Flatpak programą, tai tarsi parsineštum visą didelę palapinę, kurioje yra ne tik tavo spinta, bet ir visa kita - virtuvė, vonia ir dar keli kambariai. Kodėl taip daroma?\nKartais programoms reikia kitų programų, kad jos veiktų gerai. Tavo kompiuteryje ne visada yra visos šios reikalingos programos. Todėl kai parsisiunti Flatpak programą, ji atsisiunčia viską, ko jai reikia, kad veiktų be problemų. Tai reiškia, kad gauni naujesnę ir geriau veikiančią programą. Tačiau ši didelė palapinė užima daugiau vietos tavo kompiuteryje, nes joje yra viskas, ko reikia programai.\nPavyzdžiui, susiraskime programą “hedgewars”. Pasirink bet kurią piktogramą.\n\nKaip matai, šalia “System Package” arba “Flatpak” yra nedidelis trikampiukas. Paspaudus ant jo, pamatysi, jog gali įdiegti šią programą ir kitu formatu.\nTaip atrodo System Package:\n\nO štai taip Flatpak. Atkreipk dėmesį į programos versijos skirtumus ir kiek vietos reikia kompiuteryje.\n\nKaip System Package ši programa užima 194 MB vietos tavo kompiuteryje, o kaip Flatpak - 3.7 GB. 3.7 GB atitinka 3700 MB. Taigi beveik 20 kartų daugiau vietos. Tai reiškia, kad Flatpak programai reikia daugiau vietos, nes ji atsisiunčia viską, ko jai reikia.\nGera žinia yra ta, kad kai instaliuosi kitą programą su Flatpak, labai tikėtina, kad kita programa jau galės naudotis kai kuriais dalykais iš pirmosios palapinės. Tada naujai programai reikės mažiau vietos.\nFlatpak programas taip pat galima instaliuoti per Terminal programą.\nTačiau tai šiek tiek skiriasi:\n\nnereikia naudoti sudo\nvietoj apt reikia naudoti flatpak\nnaudojame install\nprogramos pavadinimą galima pasiimti iš Software Manager, bet daugiau Flatpak programų galima rasti ir flathub.org tinklapyje.\n\nVideo",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Linux programos ir atnaujinimai</span>"
    ]
  },
  {
    "objectID": "3_linux_update.html#software-manager",
    "href": "3_linux_update.html#software-manager",
    "title": "3  Linux programos ir atnaujinimai",
    "section": "6.1 Software Manager",
    "text": "6.1 Software Manager\nPirmiausia pažiūrėkime, kaip ištrinti programas naudojant Software Manager.\n\nAtidaryk Software Manager.\nPaspaudus ant trijų brūkšnelių spausk ant “Show Installed Application” (lt. parodyk įdiegtas programas).\n\n\n\nSurask programą, kurią nori ištrinti, ir spausk ant jos pavadinimo ar piktogramos.\n\n\n\nAtsidariusiame lange spausk ant Remove (lt. pašalinti).\n\n\n\nSoftware Manager programa paprašys patvirtinimo. Spausk Continue, įvesk savo slaptažodį ir spausk Authenticate.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Linux programos ir atnaujinimai</span>"
    ]
  },
  {
    "objectID": "3_linux_update.html#menu",
    "href": "3_linux_update.html#menu",
    "title": "3  Linux programos ir atnaujinimai",
    "section": "6.2 Menu",
    "text": "6.2 Menu\nKitas būdas ištrinti programas yra per Menu.\n\nAtidaryk meniu, kur randi visas savo programas.\nDešiniu pelės klavišu spustelk ant programos, kurią nori ištrinti. Prasiskleis papildomas meniu.\nPasirink Uninstall (lt. pašalinti).\nPasirodys patvirtinimo langas. Pasirink OK, įvesk savo slaptažodį ir spausk Authenticate.\n\nVideo",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Linux programos ir atnaujinimai</span>"
    ]
  },
  {
    "objectID": "3_linux_update.html#terminalas",
    "href": "3_linux_update.html#terminalas",
    "title": "3  Linux programos ir atnaujinimai",
    "section": "6.3 Terminalas",
    "text": "6.3 Terminalas\nProgramas taip pat galima ištrinti per terminalą.\n\n6.3.1 Sisteminis paketas\nNorėdami ištrinti sisteminį paketą, naudokime apt programą. Pavyzdžiui, jei nori ištrinti programą “3dchess”:\n\nAtidaryk terminalą.\nĮrašyk šią komandą: sudo apt remove 3dchess\n\nPaaiškinkime, kas čia yra kas:\n\nsudo - pakelia tavo teises iki administratoriaus ir leidžia ištrinti programas.\napt - programa, kuri įdiegia, atnaujina ir pašalina programas.\nremove - komanda, pasakanti apt, kad reikia ištrinti programą.\n3dchess - argumentas, pasakantis, kokią programą ištrinti.\n\nKompiuteris gali paprašyti patvirtinimo. Įrašyk Y ir spausk Enter.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Linux programos ir atnaujinimai</span>"
    ]
  },
  {
    "objectID": "3_linux_update.html#flatpak-1",
    "href": "3_linux_update.html#flatpak-1",
    "title": "3  Linux programos ir atnaujinimai",
    "section": "6.4 Flatpak",
    "text": "6.4 Flatpak\nPer Terminal irgi galime ištrinti Flatpak programą. Pavyzdžiui, jei nori ištrinti programą org.hedgewars.Hedgewars:\nflatpak uninstall org.hedgewars.Hedgewars\nPaaiškinkime, kas čia yra kas:\n\nflatpak - programa, kuri įdiegia, atnaujina ir pašalina Flatpak programas.\nuninstall - komanda, pasakanti flatpak, kad reikia ištrinti programą.\norg.hedgewars.Hedgewars - argumentas, pasakantis, kokią programą ištrinti.\n\nKompiuteris gali paprašyti patvirtinimo. Įrašyk Y ir spausk Enter.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Linux programos ir atnaujinimai</span>"
    ]
  },
  {
    "objectID": "3_linux_update.html#kodėl-per-terminal",
    "href": "3_linux_update.html#kodėl-per-terminal",
    "title": "3  Linux programos ir atnaujinimai",
    "section": "6.5 Kodėl per Terminal?",
    "text": "6.5 Kodėl per Terminal?\nKo gero tau dabar kyla klausimas, kodėl verta mokėti atnaujinti, įdiegti ir ištrinti programas naudojant Terminal?\nNaudoti Terminal gali atrodyti sudėtingiau nei spustelėti pelę, tačiau jis turi daug privalumų.\n\nTerminal leidžia tau atlikti daugybę užduočių labai greitai. Užuot naršant per meniu ir ieškant reikiamų funkcijų, tu gali tiesiog įvesti kelias komandas ir tavo darbas bus atliktas.\nTerminal suteikia daugiau galimybių ir lankstumo. Kai kuriuos dalykus gali padaryti tik per Terminal. Be to, Terminal naudoti gali būti smagu! Tai tarsi magija – tu rašai komandas, o kompiuteris jas vykdo.\nTerminal naudojimas gali padėti tau geriau suprasti, kaip veikia tavo kompiuteris. Kai tu įrašai komandas ir matai, kaip jos veikia, tu pradedi suvokti, kas vyksta tavo kompiuterio viduje.\nTerminal naudojimas gali padėti tau tapti tikru kompiuterių ekspertu. Ir kas žino, galbūt ateityje tave sudomins programavimo, duomenų analitikos ar tiesiog inžinerijos mokslai? Labai daug profesijų pradeda nautodi programavimą kasdieniuose savo darbuose. Aplinkosaugininkai gali tyrinėti kaip keičiasi klimatas ir kaip kinta gamta, buhalteriai gali paspasrtinti ataskaitų ruošimą, architektai apskaičiuoti kaip statyti namą, jog jis nesugriųtų vykstant žemės drebėjimui, robotikos specialistai - kaip sukonstruoti robotoą, kuris važinėja ir tyrinėja Marso planeta…\n\nSkamba truputį sudėtingai, tiesa? Pateiksiu tau pavyzdį. Įsivaizduok, kad tu turi draugę vardu Pelenė. Pelenė irgi turi kompiuterį, bet nežino, kaip įdiegti programas. Tačiau jūs norite kartu žaisti tą patį žaidimą - lenktyniauti žaidžiant Super Tux Cart. Ką daryti?\nTu gali jai parašyti žinutę ir pasakyti, kad nukopijuotų ir paleistų štai tokį kodą:\nsudo apt update && sudo apt full-upgrade -y && sudo apt autoremove -y && flatpak update && flatpak install net.supertuxkart.SuperTuxKart -y\nNa štai, jeigu jūs turite paskyras Super Tux Cart, dabar galite nuotoliniu būdu lenktyniauti kartu.\nDar neturi paskyros ir elektroninio pašto adreso? Sekančioje pamokoje tai ir susikursime.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Linux programos ir atnaujinimai</span>"
    ]
  },
  {
    "objectID": "4_linux_software.html",
    "href": "4_linux_software.html",
    "title": "4  Linux programos ir atnaujinimai",
    "section": "",
    "text": "5 Pradžia\nVisuose kompiuteriuose yra daugybė įvairių programų. Pavyzdžiui, jau susipažinome su Terminal ir Files programomis. Taip pat išmokome naudoti kai kurias įdiegtas komandas: echo, cat, ir base64. Šių programų kūrėjai dažnai atnaujina savo programas, tad norėdami pasinaudoti naujausiomis funkcijomis ir pataisymais, turime įdiegti šiuos atnaujinimus (angl. - update).\nŠioje pamokoje sužinosime:\nBe to, išmoksime:\nŠis skyrius padės išmokti, kaip efektyviai tvarkytis su programomis ir jų atnaujinimais, kad kompiuteris visada būtų naujausias ir veiktų be trikdžių.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Linux programos ir atnaujinimai</span>"
    ]
  },
  {
    "objectID": "4_linux_software.html#update-manager",
    "href": "4_linux_software.html#update-manager",
    "title": "4  Linux programos ir atnaujinimai",
    "section": "5.1 Update Manager",
    "text": "5.1 Update Manager\nUpdate Manager yra programa, kuri padeda atnaujinti kitas programas tavo kompiuteryje. Ji pati praneša, kai laikas atnaujinti programas. Kai internete yra prieinami atnaujinimai, dešiniame kampe atsiranda skydelio su raudonu tašku piktograma (raudonas taškas reiškia, kad yra naujų atnaujinimų).\n\n\nBet jei nematai šios piktogramos, gali paleisti “Update Manager” programą per Menu:\n.\nPirmą kartą paleidus šią programą, gali pamatyti tokį langą, kuris paaiškina, ką ji daro. Drąsiai spausk ant OK.\n\nJei pamatysi, kad pačiai programai reikia atnaujinimo, spausk ant “Apply the Update” (lt. - įdiegti atnaujinimą). Taip pat gali matyti užrašą switch to a local mirror, kol kas spausk No. Kas yra veidrodžiai (angl. - mirrors), pakalbėsime netrukus.\n\nJei paspaudus “Apply the Update” kompiuteris paprašys tavo slaptažodžio, įvesk jį. Taip kompiuteris įsitikina, kad tik tu ar kitas vartotojas, kuriam priklauso šis kompiuteris, gali atlikti pakeitimus. Drąsiai įvesk savo slaptažodį ir spausk Authenticate (lt. - patvirtinti tapatybę).\n\nNetrukus pamatysi vaizdą, kuris gali atrodyti panašiai - vienas ar keli, o gal net daugybė skirtingų programų atnaujinimų, kuriuos gali įdiegti savo kompiuteriui. Tačiau kol kas dar nieko nespauskime. Susipažinkime su tuo, ką čia matome:\n\n\n\nType - kokio tipo yra atnaujinimas? Jie gali būti:\n\nSecurity update - saugumo atnaujinimas. Jo simbolis yra skydelis. Tai svarbiausias atnaujinimas, kurį reikia kuo skubiau įdiegti, kad kompiuteris būtų saugus.\nKernel update - pagrindinės Linux sistemos atnaujinimas. Jo simbolis yra žaibas. Šie atnaujinimai pagerina, kaip veikia pats kompiuteris. Ar ekranas rodo gerai? Ar veikia pelė? Ir t.t.\nSoftware update - programų atnaujinimai. Tai atnaujinimai, kuriuos programų kūrėjai sukuria, kad jų programos veiktų geriau, turėtų daugiau funkcijų ir pan.\n\n\nŠiame lange taip pat gali paspausti ant:\n\n\nClear - išvalyti visus pasirinktus atnaujinimus\nSelect All - pasirinkti visus atnaujinimus\nRefresh - atnaujinti sąrašą atnaujinimų, kurie yra prieinami\nInstall Updates - įdiegti pasirinktus atnaujinimus\n\nBet kaip kompiuteris žino, kokias programas atnaujinti? Ir iš kur jis jas atsisiunčia?\n\n5.1.1 Mirrors ir Updates\nVeidrodėli, veidrodėli, kas pasaulyje gražiausia?\n\nPradėkime nuo pradžių…\nĮsivaizduok, kad programuotoja, kuri kuria programas, dirba iš namų, kaip ir tu. Po ilgos darbo savaitės, ji nusprendžia: “Viskas, programos atnaujinimas paruoštas. Ištaisyta klaida, įdiegti nauji patobulinimai”.\n\n(Nuotraukoje Jaime Gunther, kuri 38 metų nusprendė, kad mokysis savarankiškai programuoti ir tapo programuotoja)\nBet dabar įsivaizduok, kad keli milijonai žmonių bandytų parsisiųsti iš jos kompiuterio šiuos atnaujinimus. Jos kompiuteris negalėtų to atlaikyti, ir viskas strigtų bei vyktų labai lėtai.\nTodėl programuotoja naudoja serverius veidrodžius (angl. - mirrors).\n\nKas yra serveris? Serveris yra didelis kompiuteris, kuris pastatytas specialiose vietose ir gali aptarnauti milijonus žmonių vienu metu. (daugiau nuotraukų gali rasti čia)\n\n\n\nKodėl jie vadinami veidrodžiais (angl. - mirrors)? Nes jie atspindi tuos programinius pakeitimus, kuriuos programuotoja padarė savo namuose. Kai ji kažką atnaujina, šie serveriai iškart tai atspindi, ir tu gali parsisiųsti atnaujinimus neapkraudamas programuotojos namų kompiuterio!\n\nDabar kyla klausimas, o kaip tavo kompiuteris žino, iš kurio serverio parsisiųsti? Tavo kompiuteryje yra kodas, kuris turi sąrašą, kaip rasti visus šiuos serverius.\nNuo to, kaip toli serveris nuo tavęs, priklauso programų ir atnaujinimų parsisiuntimo greitis. Todėl labai svarbu kartais pasitikrinti ar pasirinkti artimiausi serveriai. Būtent dėl šios priežasties kartais tavo kompiuteris paklausia, ar nori prisijungti prie vietinių veidrodinių serverių - “Do you want to switch to a local mirror?”\nDabar kyla klausimas, o kaip tavo kompiuteris žino, iš kurio serverio parsisiųsti? Tavo kompiuteryje yra kodas, kuriame yra sarašas kaip rasti visus šiuos serverius.\nNuo to, kaip toli serveris nuo tavęs nutolęs, priklauso prgramų ir atnaujinimų parsisiuntimo greitis. Todėl labai svarbu kartais pasitiktrinti, ar pasirinkti artimiausi serveriai. Būtent dėl šios priežasies, kartais tavo kompiuteris paklausia, ar nori prisijngti prie lokalių veidrodžių.\nKaip tai padaryti?\n\nSpausk ant “Edit” (pakeitimai) ir tada ant “Software Sources” (programų šaltiniai).\nKompiuteris vėl paprašys tavo slaptažodžio, įvesk jį.\nAtsidariusiame naujame lange pamatysi Main ir Base veidrodžius. Jie gali būti nustatyti ne visai ten, kur gyveni tu.\nSpustelk pele prie Main. Atsidarys langas, kuriame bus serveriai, surūšiuoti pagal tai, kaip arti tavęs jie yra (pagal atsisiuntimo greitį). Tu pamatysi, kad po kelių sekundžių sąrašo viršus nebekinta. Tau nereikia laukti, kol kompiuteris parsisiųs visų serverių informaciją. Pasirink patį pirmą serverį\nPakartok tai su Base serveriu.\nSpustelk ant “Update the mirrors” (atnaujinti veidrodinius serverius). Tai gali truputį užtrukti.\nAtnaujinus, pamatysi, kad buvusius serverius pakeitė kiti, tavo pasirinkti serveriai.\nDabar gali uždaryti šį langą.\n\nVisas procesas šiame video:\nVideo\nDabar gali atnaujinti programas, paspaudus ant Install Updates. Gali atsirasti papildomi langai, kur paklaus, ar tikrai nori įdiegti atnaujinimus, gali paprašyti ir įvesti tavo slaptažodį dar kartą. Visur drąsiai sakyk “taip” ir įrašyk savo slaptažodį.\nTačiau yra ir kitas būdas! Naudojant Terminal.\nVeidrodinių serverių atnaujinimas yra būtinas net kai įdiegi atnaujinimus per Terminalą. Tad retkarčiais pasitikrink, ar pasirinkti vis dar sparčiausi veidroriniai serveriai.\n\n\n5.1.2 Atnaujinimų instalivimas per Terminal\nKodėl kartais geriau įdiegti atnaujinimus per Terminal programą? Visų pirma - tu praktikuojiesi BASH kalbos žinias! Visų antra, vėliau išmoksi, kaip vos kelių klavišų paspaudimu tai padaryti daug greičiau nei spaudant su pele ir naudojant Update Manager programą.\nŠtai taip atrodo kodas, kurį reikės įrašyti:\nsudo apt update && \nsudo apt full-upgrade -y && \nsudo apt autoremove -y && \nflatpak update\nDabar tavo galvoje gal atrodo taip:\n\nPradėkime nuo pradžių ir eikime per visas komandas, kad jas suprastume. Kai suprasi - pamatysi, kad viskas gana paprasta.\nMes galime visas komandas surašyti į vieną eilutę, bet paprastumo dėlei, terminale įrašyk komandą po komandos, kaip pateiktia žemiau.\n\nsudo apt update.\n\n\nčia iššaukiama komanda apt. Tai yra programa, kuri rūpinasi programų atnaujinimu.\nupdate yra argumentas, ką programa turi daryti. Priešingai nei atrodo, ji neatnaujina programų. Ką ji padaro, tai palygina tavo kompiuterio programas su tuo, kas yra veidrodiniuose serveriuose (mirror). Jeigu ji aptinka skirtumą, nes, pvz., serveryje programa yra naujesnė, apt tave informuos apie galimus atnaujinimus.\nO kas yra sudo? Atsimeni, kai Update Manager tavęs prašė įrašyti tavo slaptažodį? Kai tu jį įrašydavai, kompiuteris suprasdavo, jog tu turi kompiuterio administratoriaus teises. sudo padaro tą patį. Ši komanda pasako, kad po jo sekantis kodas būtų įvykdytas su kompiuterio administratoriaus teisėmis ir apsaugo, kad svetimi žmonės nieko negalėtų padaryti tavo kompiuteriui.\n\nSpausk Enter. Paleidus šią komandą, Terminal tavęs paprašys įrašyti savo slaptažodį. Jį rašant tu nieko nematysi (juk nenori, kad sėdint kavinėje, kas nors pamatytų tavo slaptažodį?). Įvesk ir spausk Enter dar kartą. Jeigu savo slaptažodį įvesi neteisingai - terminalas tau tai pasakys, tad galėsi bandyti dar kartą.\nJeigu tavo kompiuteriui yra pasiekiami atnaujinimai - tu pamatysi, kiek jų.\n\n\nsudo apt full-upgrade -y.\n\n\nŠi dalis pasako, kad sudo - elkis kaip administratorius\napt naudok programų atnaujinimų programą.\nfull-upgrade - atnaujink visas programas.\n-y yra nustatymas, panašus į ką jau matėme su base64 -d, tik šį kartą jis reiškia yes (lt - taip). Jeigu jo nepanaudotum, Terminal programa tavęs paklaustų, kokius atnaujinimus siūlo padaryti ir dar kartą klaustų, ar tikrai nori viską įdiegti. Tam kad išvengti šio papildomo klausimo, iš karto pasakome - yes.\n\nJeigu tu rašai šią komandą iškart po to, kai jau naudojai sudo apt update, Terminal programa tavęs gali ir nebeprašyti dar kartą įrašyti savo slaptažodį.\nPriklausomai nuo to, kiek yra atnaujinimų, šis procesas gali užtrukti kelioliką sekundžių, bet gali ir kelioliką minučių.\nVideo\n\nsudo apt autoremove -y.\n\n\nsudo ir apt jau žinome.\nauto-remove - šis nustatymas pasako apt komandai, kad jeigu yra kažkokių programų, kurios po atnaujinimo nebereikalingos, jas ištrintų. Nebijok, apt programa yra labai protinga ir atsargiai atsirenka, ką trinti ir ko ne.\n-y nustatymas pasako yes (taip), kad nereiktų patvirtinimo.\n\n\n\nflatpak update - kiek kita komanda. Čia mes iššaukiame programą flatpak, kuri, kaip ir programa apt, moka instaliuoti programas. Tačiau ją atnaujinti užtenka vos šių dviejų žodžių.\n\n\n\nO ką gi reiškia && toje ilgoje komandoje? Kai mes rašome komandas po vieną, kaip padarėme dabar, mes patys matome, ar nutiko kas nors netikėto, ar įvyko kokia nors klaida ir t.t. Tam, kad kompiuteris žinotų, jog tik padarius sudo apt update ir negavus jokių klaidų, jis eitų prie sekančios komandos sudo apt full-upgrade -y ir taip toliau, reikia šias komandas sujungti su &&. Jeigu prieš tai buvusi komanda nepavyktų, kompiuteris nutrauktų visas likusias komandas.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Linux programos ir atnaujinimai</span>"
    ]
  },
  {
    "objectID": "4_linux_software.html#sisteminių-paketų-instaliavimas",
    "href": "4_linux_software.html#sisteminių-paketų-instaliavimas",
    "title": "4  Linux programos ir atnaujinimai",
    "section": "6.1 Sisteminių paketų instaliavimas",
    "text": "6.1 Sisteminių paketų instaliavimas\nSisteminis paketas (angl. System Package) - tai programa, kurią Linux kūrėjai patikrino ir pritaikė tavo kompiuterio veikimui. Šios programos valdomos per apt programą.\nKita programų instaliavimo sistema yra Flatpak, su ja susipažinsime vėliau.\nĮdiekime “Bloboats” žaidimą.\nPaieškos viršuje įrašyk Bloboats ir paspausk ant programos piktogramos.\n\nKaip matai, sekantis langas parodo, jog tai System Package ir leidžia tau šią programą įdiegti. Spausk ant Install.\n\nSoftware Manager programa informuos tave, jei reikia įdiegti papildomas programas.\n\nJei taip nutiktų, spausk ant Continue, o tada įrašyk savo slaptažodį ir spausk ant Authenticate. Prisimeni, kai tu įrašai savo slaptažodį, kompiuteris komandas vykdo kaip sudo :)\n\nDabar gali spausti ant Launch (lt - paleisti), arba rasi šią programą tarp visų programų.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Linux programos ir atnaujinimai</span>"
    ]
  },
  {
    "objectID": "4_linux_software.html#sisteminių-paketų-įdiegimas-terminal-lange",
    "href": "4_linux_software.html#sisteminių-paketų-įdiegimas-terminal-lange",
    "title": "4  Linux programos ir atnaujinimai",
    "section": "6.2 Sisteminių paketų įdiegimas Terminal lange",
    "text": "6.2 Sisteminių paketų įdiegimas Terminal lange\nSusiraskime kitą programą - 3dchess. Kaip matai, jos pavadinimas kompiuteriui yra parašytas šio lango apačioje:\n\nAtsidaryk terminalą ir įrašyk šią komandą, daug kas jau tau bus matyta:\nsudo apt install 3dchess\nPaaiškinkime, kas čia yra kas:\n\nsudo - pakelia tavo teises iki administratoriaus ir leidžia įdiegti programas.\napt - programa, kuri įdiegia, atnaujina ir pašalina programas.\ninstall - komanda, pasakanti apt, ką turi daryti, šįkart įdiegti naują programą.\n3dchess - argumentas, pasakantis, kokią programą įdiegti.\n\nMes taip pat galėjome pridėti -y, bet šįkart to nepadarysime. Pažiūrėkime, kas nutinka. Ar pastebėjai kompiuterio reikalavimą patvirtinti, jog tikrai nori instaliuoti šią programą? Do you want to Continue [Y/n]\nVideo\nKaip matai, kompiuteris manęs klausė, ar tikrai noriu, ir teko įrašyti Y raidę ir spustelėti Enter. Tiesa, kai matai [Y/n] tai reiškia, kad jeigu tiesiog paspausi Enter - kompiuteris galvos, kad tu renkiesi Y (Yes trumpinys), tad rašyti Yes tau net nereikia. Kartais tu gali pamatyti [N/y]. Taigi tas pasirinkimas, kuris parašytas didžiąja raide - bus automatiškai pasirinktas jeigu nieko neįrašysi, bet pasupausi Enter klavišą.\nJeigu būčiau įrašęs komandą\nsudo apt install 3dchess -y\nTerminal programa manęs neprašytų patvirtinti mano pasirinkimo. Nes priejus šiam klausimui Do you want to Continue [Y/n], nustatymas -y pasakytų iškart Yes.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Linux programos ir atnaujinimai</span>"
    ]
  },
  {
    "objectID": "4_linux_software.html#flatpak",
    "href": "4_linux_software.html#flatpak",
    "title": "4  Linux programos ir atnaujinimai",
    "section": "6.3 Flatpak",
    "text": "6.3 Flatpak\nFlatpak yra kitoks būdas instaliuoti programas. Kai tu instaliuoji Flatpak programą, tu atsisiunti ne tik pačią programą, bet ir visas kitas programas, kurios reikalingos, kad pagrindinė programa veiktų. Pabandykime tai paaiškinti kitaip.\nĮsivaizduok, kad tavo kompiuteris yra kaip namas. Namai turi kambarius, virtuvę, vonią ir t.t. Dabar įsivaizduok, kad nori naujos spintos. Kai tu parsisiunti spintą kaip System Package (sisteminį paketą), tai tarsi parsiveži ją iš IKEA parduotuvės ir pastatai savo kambaryje.\nFlatpak programos veikia kitaip. Kai tu atsisiunti Flatpak programą, tai tarsi parsineštum visą didelę palapinę, kurioje yra ne tik tavo spinta, bet ir visa kita - virtuvė, vonia ir dar keli kambariai. Kodėl taip daroma?\nKartais programoms reikia kitų programų, kad jos veiktų gerai. Tavo kompiuteryje ne visada yra visos šios reikalingos programos. Todėl kai parsisiunti Flatpak programą, ji atsisiunčia viską, ko jai reikia, kad veiktų be problemų. Tai reiškia, kad gauni naujesnę ir geriau veikiančią programą. Tačiau ši didelė palapinė užima daugiau vietos tavo kompiuteryje, nes joje yra viskas, ko reikia programai.\nPavyzdžiui, susiraskime programą “hedgewars”. Pasirink bet kurią piktogramą.\n\nKaip matai, šalia “System Package” arba “Flatpak” yra nedidelis trikampiukas. Paspaudus ant jo, pamatysi, jog gali įdiegti šią programą ir kitu formatu.\nTaip atrodo System Package:\n\nO štai taip Flatpak. Atkreipk dėmesį į programos versijos skirtumus ir kiek vietos reikia kompiuteryje.\n\nKaip System Package ši programa užima 194 MB vietos tavo kompiuteryje, o kaip Flatpak - 3.7 GB. 3.7 GB atitinka 3700 MB. Taigi beveik 20 kartų daugiau vietos. Tai reiškia, kad Flatpak programai reikia daugiau vietos, nes ji atsisiunčia viską, ko jai reikia.\nGera žinia yra ta, kad kai instaliuosi kitą programą su Flatpak, labai tikėtina, kad kita programa jau galės naudotis kai kuriais dalykais iš pirmosios palapinės. Tada naujai programai reikės mažiau vietos.\nFlatpak programas taip pat galima instaliuoti per Terminal programą.\nTačiau tai šiek tiek skiriasi:\n\nnereikia naudoti sudo\nvietoj apt reikia naudoti flatpak\nnaudojame install\nprogramos pavadinimą galima pasiimti iš Software Manager, bet daugiau Flatpak programų galima rasti ir flathub.org tinklapyje.\n\nVideo",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Linux programos ir atnaujinimai</span>"
    ]
  },
  {
    "objectID": "4_linux_software.html#software-manager",
    "href": "4_linux_software.html#software-manager",
    "title": "4  Linux programos ir atnaujinimai",
    "section": "7.1 Software Manager",
    "text": "7.1 Software Manager\nPirmiausia pažiūrėkime, kaip ištrinti programas naudojant Software Manager.\n\nAtidaryk Software Manager.\nPaspaudus ant trijų brūkšnelių spausk ant “Show Installed Application” (lt. parodyk įdiegtas programas).\n\n\n\nSurask programą, kurią nori ištrinti, ir spausk ant jos pavadinimo ar piktogramos.\n\n\n\nAtsidariusiame lange spausk ant Remove (lt. pašalinti).\n\n\n\nSoftware Manager programa paprašys patvirtinimo. Spausk Continue, įvesk savo slaptažodį ir spausk Authenticate.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Linux programos ir atnaujinimai</span>"
    ]
  },
  {
    "objectID": "4_linux_software.html#menu",
    "href": "4_linux_software.html#menu",
    "title": "4  Linux programos ir atnaujinimai",
    "section": "7.2 Menu",
    "text": "7.2 Menu\nKitas būdas ištrinti programas yra per Menu.\n\nAtidaryk meniu, kur randi visas savo programas.\nDešiniu pelės klavišu spustelk ant programos, kurią nori ištrinti. Prasiskleis papildomas meniu.\nPasirink Uninstall (lt. pašalinti).\nPasirodys patvirtinimo langas. Pasirink OK, įvesk savo slaptažodį ir spausk Authenticate.\n\nVideo",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Linux programos ir atnaujinimai</span>"
    ]
  },
  {
    "objectID": "4_linux_software.html#terminalas",
    "href": "4_linux_software.html#terminalas",
    "title": "4  Linux programos ir atnaujinimai",
    "section": "7.3 Terminalas",
    "text": "7.3 Terminalas\nProgramas taip pat galima ištrinti per terminalą.\n\n7.3.1 Sisteminis paketas\nNorėdami ištrinti sisteminį paketą, naudokime apt programą. Pavyzdžiui, jei nori ištrinti programą “3dchess”:\n\nAtidaryk terminalą.\nĮrašyk šią komandą: sudo apt remove 3dchess\n\nPaaiškinkime, kas čia yra kas:\n\nsudo - pakelia tavo teises iki administratoriaus ir leidžia ištrinti programas.\napt - programa, kuri įdiegia, atnaujina ir pašalina programas.\nremove - komanda, pasakanti apt, kad reikia ištrinti programą.\n3dchess - argumentas, pasakantis, kokią programą ištrinti.\n\nKompiuteris gali paprašyti patvirtinimo. Įrašyk Y ir spausk Enter.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Linux programos ir atnaujinimai</span>"
    ]
  },
  {
    "objectID": "4_linux_software.html#flatpak-1",
    "href": "4_linux_software.html#flatpak-1",
    "title": "4  Linux programos ir atnaujinimai",
    "section": "7.4 Flatpak",
    "text": "7.4 Flatpak\nPer Terminal irgi galime ištrinti Flatpak programą. Pavyzdžiui, jei nori ištrinti programą org.hedgewars.Hedgewars:\nflatpak uninstall org.hedgewars.Hedgewars\nPaaiškinkime, kas čia yra kas:\n\nflatpak - programa, kuri įdiegia, atnaujina ir pašalina Flatpak programas.\nuninstall - komanda, pasakanti flatpak, kad reikia ištrinti programą.\norg.hedgewars.Hedgewars - argumentas, pasakantis, kokią programą ištrinti.\n\nKompiuteris gali paprašyti patvirtinimo. Įrašyk Y ir spausk Enter.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Linux programos ir atnaujinimai</span>"
    ]
  },
  {
    "objectID": "4_linux_software.html#kodėl-per-terminal",
    "href": "4_linux_software.html#kodėl-per-terminal",
    "title": "4  Linux programos ir atnaujinimai",
    "section": "7.5 Kodėl per Terminal?",
    "text": "7.5 Kodėl per Terminal?\nKo gero tau dabar kyla klausimas, kodėl verta mokėti atnaujinti, įdiegti ir ištrinti programas naudojant Terminal?\nNaudoti Terminal gali atrodyti sudėtingiau nei spustelėti pelę, tačiau jis turi daug privalumų.\n\nTerminal leidžia tau atlikti daugybę užduočių labai greitai. Užuot naršant per meniu ir ieškant reikiamų funkcijų, tu gali tiesiog įvesti kelias komandas ir tavo darbas bus atliktas.\nTerminal suteikia daugiau galimybių ir lankstumo. Kai kuriuos dalykus gali padaryti tik per Terminal. Be to, Terminal naudoti gali būti smagu! Tai tarsi magija – tu rašai komandas, o kompiuteris jas vykdo.\nTerminal naudojimas gali padėti tau geriau suprasti, kaip veikia tavo kompiuteris. Kai tu įrašai komandas ir matai, kaip jos veikia, tu pradedi suvokti, kas vyksta tavo kompiuterio viduje.\nTerminal naudojimas gali padėti tau tapti tikru kompiuterių ekspertu. Ir kas žino, galbūt ateityje tave sudomins programavimo, duomenų analitikos ar tiesiog inžinerijos mokslai? Labai daug profesijų pradeda nautodi programavimą kasdieniuose savo darbuose. Aplinkosaugininkai gali tyrinėti kaip keičiasi klimatas ir kaip kinta gamta, buhalteriai gali paspasrtinti ataskaitų ruošimą, architektai apskaičiuoti kaip statyti namą, jog jis nesugriųtų vykstant žemės drebėjimui, robotikos specialistai - kaip sukonstruoti robotoą, kuris važinėja ir tyrinėja Marso planeta…\n\nSkamba truputį sudėtingai, tiesa? Pateiksiu tau pavyzdį. Įsivaizduok, kad tu turi draugę vardu Pelenė. Pelenė irgi turi kompiuterį, bet nežino, kaip įdiegti programas. Tačiau jūs norite kartu žaisti tą patį žaidimą - lenktyniauti žaidžiant Super Tux Cart. Ką daryti?\nTu gali jai parašyti žinutę ir pasakyti, kad nukopijuotų ir paleistų štai tokį kodą:\nsudo apt update && sudo apt full-upgrade -y && sudo apt autoremove -y && flatpak update && flatpak install net.supertuxkart.SuperTuxKart -y\nNa štai, jeigu jūs turite paskyras Super Tux Cart, dabar galite nuotoliniu būdu lenktyniauti kartu.\nDar neturi paskyros ir elektroninio pašto adreso? Sekančioje pamokoje tai ir susikursime.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Linux programos ir atnaujinimai</span>"
    ]
  },
  {
    "objectID": "5_passwords_online_accounts.html",
    "href": "5_passwords_online_accounts.html",
    "title": "5  Slaptažodžiai ir internetinės paskyros",
    "section": "",
    "text": "5.1 Intro\nAr žinai, kas kelia didžiausią riziką internete, tiek vaikams, tiek suaugusiems? Nesaugūs slaptažodžiai.\nTokie slaptažodžiai kaip:\nyra begalo pavojingi. Blogi pogramuotjai, dar vadinami “hakeriais”, nuolat bando nulaužti internetinas paskyras. Tam jie naudojasi teksto generatoriais, sukuria šimtus tūkstančių kombinacijų, pvz pelenė123 ir bando nulaužti internetinius slaptažodžius.\nkas gali nutikti blogiausia, jeigu tavo slaptažodį nulauš?\nScerijus:\nRetai, bet taip nutinka.\nŠioje pamokoje išmoksi kas yra saugus slaptažodis, kaip juos sukurti ir kaip juos saugoti. Taip tai ne visada yra patogu, bet deja, kaip visad gyvenime, reikia ieškoti kompromiso tarp saugumo ir patogumo.",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Slaptažodžiai ir internetinės paskyros</span>"
    ]
  },
  {
    "objectID": "5_passwords_online_accounts.html#intro",
    "href": "5_passwords_online_accounts.html#intro",
    "title": "5  Slaptažodžiai ir internetinės paskyros",
    "section": "",
    "text": "12345\nslaptažodis\nvardaspavardė\nmamos vardas\naugintinio vardas\n\n\n\n\n\nHackeris “nulaužia” t.y. atspėja tavo slaptažodį pvz Google paskyros\nNueina į tavo banko paskyrą, ir pranša, kad pamiršo savo slaptažodį. Bankas atsiunčia nuorodą į elektronį paštą, kuriame prideda nuorodą, leidžiančia sukurti naują slaptažodį bankui.\nPrisijungęs prie tavo banko paskyros - hackeris ištuština tavo visas santaupas. Dabar tu turi eiti skolintis, vien tam, kad turėti pinigų maistui.\nBet hackeris buvo ypač blogas, apart visko, jis dar ištrynė ir visas kitas tavo paskyras, nuotraukų kopijas esančias internete ir prikėtė visokių kitų šunybių.\nNa prie to pačio, dar ir užrakino tavo telefoną, ištrynė kontaktus, tad net nebežinai, kaip paskambinti draugams ir paprašyti pagalbos.",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Slaptažodžiai ir internetinės paskyros</span>"
    ]
  },
  {
    "objectID": "5_passwords_online_accounts.html#kas-yra-saugus-slaptažodis",
    "href": "5_passwords_online_accounts.html#kas-yra-saugus-slaptažodis",
    "title": "5  Slaptažodžiai ir internetinės paskyros",
    "section": "5.2 Kas yra saugus slaptažodis",
    "text": "5.2 Kas yra saugus slaptažodis\nPirmiausia, saugus slaptažodis yra toks, kurio tu nežinai! Jeigu tu nežinai savo slaptažodžio, tu negali jo užrašyti ant jokio popieriaus lapelio, tad niekas jo ir nepamatys.\nTai kaip prisijungti prie paskyrų internete, pvz, banke? prie elektroninio pašto?\nTam padeda slaptažodžių programos. Jų yra įvairių\n\ninternetinės programos tokios kaip Bitwarden, kurios sinchronizuoja, t.y. suvienodina informaciją per visus tavo įrenginius: kompiuterį, telefoną ir t.t.\nkompiuteryje instaliuotos programos, pvz keepassx, kuriose išsaugai slaptažodius ir kai reikia prisijungti, atsidarai jas ir iš jų nusikopijuoji slaptažodį, kurio reikia.\n\nKiti aspektai saugaus slaptažodžio:\n\nbent 16 simbolių (geriau naudoti daugiau, bet ne visur leidžiama)\nnaudoti tiek DIDŽIĄSIAS RAIDES, tiek mažąsas, tiek skaičius bet būtinai ir simpbolius tokius kaip !@#$%^&*()_\n\ntačiau pati svarbiausia taisyklė:\n\nnaudoti skirtingus slaptažodžius visur\n\nJeigu kam nors pavyktų nulaužti tavo vieną paskyrą, pvz kokios nors internetinės parduotuvės, tas hackeris negalėtų panaudoti išgauto slaptažožio norint prisijungti prie tavo elektroninio pašto.\nNaudojant tokias programėlės kaip Bitwarden, KeepassX ir kitas, su laiku tu pamatysi, kiek daug paskyrų turi ir kaip nelengva būtų visur turėti skirtingus slaptažodžius.\n\n5.2.1 KeepassX\nInstlaiuok keepassx savo kompiuteryje. Prisimink iš praėjusio skurio, kaip instaliuoti programas naudojantis Terminal Programos pavadinimas kurio reikės keepassx\nPagalba: * sudo suteikia administratoriaus teises * apt programa kuri valdo programas * install komanda kuri įdiegia programas * &lt;argumentas&gt; programos pavadinimas, kurią norima įdiegti\n             Video Video\nTai dar kartą:\n\n16-20 simbolių slaptažodis\nsusidedantis iš įvairių raidžių, skaičių ir simbolių\nkiekvienam paskyrai skirtingas slaptažodis\nišsaugotas programėleje",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Slaptažodžiai ir internetinės paskyros</span>"
    ]
  },
  {
    "objectID": "5_passwords_online_accounts.html#elektroninis-pašto-adresas",
    "href": "5_passwords_online_accounts.html#elektroninis-pašto-adresas",
    "title": "5  Slaptažodžiai ir internetinės paskyros",
    "section": "5.3 Elektroninis pašto adresas",
    "text": "5.3 Elektroninis pašto adresas\nDauguma žmonių turi elektroninį paštro adresą sukuart Google svetainėje. Tai labai paprarsta ir patogu, juo labiau, nemokama.\nBet vėlgi, patogumas netolygu saugumui. Visų pirma Google naudojasi visais turimais duomenis, failais, laiškais ir t.t. tam, kad pagerintų reklamos rodymą. Ne Google yra produktas, kurį naudoji, o TU tampi produktu Google.\nTačiau yra ir saugumo problema, jeigu kas nors pamato tavo ekrano slaptžodį ir pavogia telefoną, o ten yra Gmail programėle, tai jau beveik ir nebereikia spėlioti tavo slaptažodžių. Tu gali nespėti užblokuoti savo telefono, o banko sąskaita jau gali būti tuščia. Kaip? Velgi, vagišius pasinaudos “pamiršau savo slaptažodį” funkcija. Jam atsius laišką į gmail su nuoroda kaip susikurti naują slaptažodį, o patvirtinimui, akd ten “tikrai tu”, bankas atsiųs SMS žinutę. Viskas viename įrenginyje…\nO jeigu tavo Gmail laiškuose dar ir tavo žinutės tavo slaptai meilei?\nKą daryti?\nGeriausia turėti elektroninį pašto adresą kuris nėra google. Gera alternatyva - Prononmail.\nTad dabar pažiūrėsime kaip susikurti Protonmail ir kaip galėsi atsidaryti emailus Thunderbird laiškų probramėlėje kompiuteryje.\nLaišku programėlės į telefoną - net nediegsime, juk vėl padidintume riziką.\n\n5.3.1 Protonmail\n\n\n5.3.2 Thunderbird",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Slaptažodžiai ir internetinės paskyros</span>"
    ]
  },
  {
    "objectID": "6_linux_comands_basic.html",
    "href": "6_linux_comands_basic.html",
    "title": "6  Manipulating files and directories",
    "section": "",
    "text": "7 Failų sistema",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Manipulating files and directories</span>"
    ]
  },
  {
    "objectID": "6_linux_comands_basic.html#pwd",
    "href": "6_linux_comands_basic.html#pwd",
    "title": "6  Manipulating files and directories",
    "section": "7.1 pwd",
    "text": "7.1 pwd\nThe filesystem manages files and directories (or folders). Each is identified by an absolute path that shows how to reach it from the filesystem’s root directory: /home/repl is the directory repl in the directory home, while /home/repl/course.txt is a file course.txt in that directory, and / on its own is the root directory.\nTo find out where you are in the filesystem, run the command pwd (short for “print working directory”). This prints the absolute path of your current working directory, which is where the shell runs commands and looks for files by default.\nRun pwd. Where are you right now?\nInstructions 50 XP Possible answers /home /repl /home/repl",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Manipulating files and directories</span>"
    ]
  },
  {
    "objectID": "6_linux_comands_basic.html#clear",
    "href": "6_linux_comands_basic.html#clear",
    "title": "6  Manipulating files and directories",
    "section": "7.2 clear",
    "text": "7.2 clear",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Manipulating files and directories</span>"
    ]
  },
  {
    "objectID": "6_linux_comands_basic.html#ls",
    "href": "6_linux_comands_basic.html#ls",
    "title": "6  Manipulating files and directories",
    "section": "7.3 ls",
    "text": "7.3 ls\nHow can I identify files and directories?\npwd tells you where you are. To find out what’s there, type ls (which is short for “listing”) and press the enter key. On its own, ls lists the contents of your current directory (the one displayed by pwd). If you add the names of some files, ls will list them, and if you add the names of directories, it will list their contents. For example, ls /home/repl shows you what’s in your starting directory (usually called your home directory).\nUse ls with an appropriate argument to list the files in the directory /home/repl/seasonal (which holds information on dental surgeries by date, broken down by season). Which of these files is not in that directory?\nPossible answers autumn.csv fall.csv spring.csv winter.csv\nHow else can I identify files and directories?\nAn absolute path is like a latitude and longitude: it has the same value no matter where you are. A relative path, on the other hand, specifies a location starting from where you are: it’s like saying “20 kilometers north”.\nAs examples:\nIf you are in the directory /home/repl, the relative path seasonal specifies the same directory as the absolute path /home/repl/seasonal.\nIf you are in the directory /home/repl/seasonal, the relative path winter.csv specifies the same file as the absolute path /home/repl/seasonal/winter.csv.\nThe shell decides if a path is absolute or relative by looking at its first character: If it begins with /, it is absolute. If it does not begin with /, it is relative. Instructions 2/3 35 XP\nYou are in /home/repl. Use ls with a relative path to list the file that has an absolute path of /home/repl/course.txt (and only that file).\nYou are in /home/repl. Use ls with a relative path to list the file /home/repl/seasonal/summer.csv (and only that file). 3\nYou are in /home/repl. Use ls with a relative path to list the contents of the directory /home/repl/people.\nls komanda yra list storage\nls / ls /home ls /home/pi ls ~ ls -l ls -lh ls -lha\ndrwxr-wxr-wx -rwxr-wxr-wx",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Manipulating files and directories</span>"
    ]
  },
  {
    "objectID": "6_linux_comands_basic.html#section",
    "href": "6_linux_comands_basic.html#section",
    "title": "6  Manipulating files and directories",
    "section": "7.4 /",
    "text": "7.4 /\n\n/home",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Manipulating files and directories</span>"
    ]
  },
  {
    "objectID": "6_linux_comands_basic.html#cd",
    "href": "6_linux_comands_basic.html#cd",
    "title": "6  Manipulating files and directories",
    "section": "7.5 cd",
    "text": "7.5 cd\nHow can I move to another directory?\nJust as you can move around in a file browser by double-clicking on folders, you can move around in the filesystem using the command cd (which stands for “change directory”).\nIf you type cd seasonal and then type pwd, the shell will tell you that you are now in /home/repl/seasonal. If you then run ls on its own, it shows you the contents of /home/repl/seasonal, because that’s where you are. If you want to get back to your home directory /home/repl, you can use the command cd /home/repl. Instructions 1/3 35 XP\n1\n\nYou are in /home/repl/. Change directory to /home/repl/seasonal using a relative path.\n2\nUse pwd to check that you’re there. 3\nUse ls without any paths to see what’s in that directory.\nHow can I move up a directory?\nThe parent of a directory is the directory above it. For example, /home is the parent of /home/repl, and /home/repl is the parent of /home/repl/seasonal. You can always give the absolute path of your parent directory to commands like cd and ls. More often, though, you will take advantage of the fact that the special path .. (two dots with no spaces) means “the directory above the one I’m currently in”. If you are in /home/repl/seasonal, then cd .. moves you up to /home/repl. If you use cd .. once again, it puts you in /home. One more cd .. puts you in the root directory /, which is the very top of the filesystem. (Remember to put a space between cd and .. - it is a command and a path, not a single four-letter command.)\nA single dot on its own, ., always means “the current directory”, so ls on its own and ls . do the same thing, while cd . has no effect (because it moves you into the directory you’re currently in).\nOne final special path is ~ (the tilde character), which means “your home directory”, such as /home/repl. No matter where you are, ls ~ will always list the contents of your home directory, and cd ~ will always take you home.\nIf you are in /home/repl/seasonal, where does cd ~/../. take you?\n\npirma pwd\ntada cd /\npwd\ncd arba cd ~ arba cd /home/pi",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Manipulating files and directories</span>"
    ]
  },
  {
    "objectID": "6_linux_comands_basic.html#copy-with-cp",
    "href": "6_linux_comands_basic.html#copy-with-cp",
    "title": "6  Manipulating files and directories",
    "section": "7.6 Copy with cp",
    "text": "7.6 Copy with cp\nHow can I copy files?\nYou will often want to copy files, move them into other directories to organize them, or rename them. One command to do this is cp, which is short for “copy”. If original.txt is an existing file, then:\ncp original.txt duplicate.txt\ncreates a copy of original.txt called duplicate.txt. If there already was a file called duplicate.txt, it is overwritten. If the last parameter to cp is an existing directory, then a command like:\ncp seasonal/autumn.csv seasonal/winter.csv backup\ncopies all of the files into that directory. Instructions 1/2 50 XP\n1\n\nMake a copy of seasonal/summer.csv in the backup directory (which is also in /home/repl), calling the new file summer.bck.\n2\nCopy spring.csv and summer.csv from the seasonal directory into the backup directory without changing your current working directory (/home/repl).",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Manipulating files and directories</span>"
    ]
  },
  {
    "objectID": "6_linux_comands_basic.html#move-the-file-with-mw",
    "href": "6_linux_comands_basic.html#move-the-file-with-mw",
    "title": "6  Manipulating files and directories",
    "section": "7.7 Move the file with mw",
    "text": "7.7 Move the file with mw\nHow can I move a file?\nWhile cp copies a file, mv moves it from one directory to another, just as if you had dragged it in a graphical file browser. It handles its parameters the same way as cp, so the command:\nmv autumn.csv winter.csv ..\nmoves the files autumn.csv and winter.csv from the current working directory up one level to its parent directory (because .. always refers to the directory above your current location). Instructions 100 XP\nYou are in /home/repl, which has sub-directories seasonal and backup. Using a single command, move spring.csv and summer.csv from seasonal to backup.",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Manipulating files and directories</span>"
    ]
  },
  {
    "objectID": "6_linux_comands_basic.html#rename-files-with-mv",
    "href": "6_linux_comands_basic.html#rename-files-with-mv",
    "title": "6  Manipulating files and directories",
    "section": "7.8 rename files with mv",
    "text": "7.8 rename files with mv\nExercise Exercise How can I rename files?\nmv can also be used to rename files. If you run:\nmv course.txt old-course.txt\nthen the file course.txt in the current working directory is “moved” to the file old-course.txt. This is different from the way file browsers work, but is often handy.\nOne warning: just like cp, mv will overwrite existing files. If, for example, you already have a file called old-course.txt, then the command shown above will replace it with whatever is in course.txt. Instructions 1/3 35 XP\n1\n\nGo into the seasonal directory.\n2\nRename the file winter.csv to be winter.csv.bck. 3\nRun ls to check that everything has worked.",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Manipulating files and directories</span>"
    ]
  },
  {
    "objectID": "6_linux_comands_basic.html#remove-files-with-rm",
    "href": "6_linux_comands_basic.html#remove-files-with-rm",
    "title": "6  Manipulating files and directories",
    "section": "7.9 remove files with rm",
    "text": "7.9 remove files with rm\nExercise Exercise How can I delete files?\nWe can copy files and move them around; to delete them, we use rm, which stands for “remove”. As with cp and mv, you can give rm the names of as many files as you’d like, so:\nrm thesis.txt backup/thesis-2017-08.txt\nremoves both thesis.txt and backup/thesis-2017-08.txt\nrm does exactly what its name says, and it does it right away: unlike graphical file browsers, the shell doesn’t have a trash can, so when you type the command above, your thesis is gone for good. Instructions 1/4 25 XP\n1\n\nYou are in /home/repl. Go into the seasonal directory.\n2\nRemove autumn.csv. 3\nGo back to your home directory. 4\nRemove seasonal/summer.csv without changing directories again.",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Manipulating files and directories</span>"
    ]
  },
  {
    "objectID": "6_linux_comands_basic.html#create-and-remove-a-directory",
    "href": "6_linux_comands_basic.html#create-and-remove-a-directory",
    "title": "6  Manipulating files and directories",
    "section": "7.10 create and remove a directory",
    "text": "7.10 create and remove a directory\nExercise Exercise How can I create and delete directories?\nmv treats directories the same way it treats files: if you are in your home directory and run mv seasonal by-season, for example, mv changes the name of the seasonal directory to by-season. However, rm works differently.\nIf you try to rm a directory, the shell prints an error message telling you it can’t do that, primarily to stop you from accidentally deleting an entire directory full of work. Instead, you can use a separate command called rmdir. For added safety, it only works when the directory is empty, so you must delete the files in a directory before you delete the directory. (Experienced users can use the -r option to rm to get the same effect; we will discuss command options in the next chapter.) Instructions 1/4 25 XP\n1\n\nWithout changing directories, delete the file agarwal.txt in the people directory.\n2\nNow that the people directory is empty, use a single command to delete it. 3\nSince a directory is not a file, you must use the command mkdir directory_name to create a new (empty) directory. Use this command to create a new directory called yearly below your home directory. 4\nNow that yearly exists, create another directory called 2017 inside it without leaving your home directory.\nExercise Exercise Wrapping up\nYou will often create intermediate files when analyzing data. Rather than storing them in your home directory, you can put them in /tmp, which is where people and programs often keep files they only need briefly. (Note that /tmp is immediately below the root directory /, not below your home directory.) This wrap-up exercise will show you how to do that. Instructions 1/4 25 XP\n1\n\nUse cd to go into /tmp.\n2\nList the contents of /tmp without typing a directory name. 3\nMake a new directory inside /tmp called scratch. 4\nMove /home/repl/people/agarwal.txt into /tmp/scratch. We suggest you use the ~ shortcut for your home directory and a relative path for the second rather than the absolute path.",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Manipulating files and directories</span>"
    ]
  },
  {
    "objectID": "6_linux_comands_basic.html#viewing-file-contents-with-cat",
    "href": "6_linux_comands_basic.html#viewing-file-contents-with-cat",
    "title": "6  Manipulating files and directories",
    "section": "8.1 Viewing file contents with cat",
    "text": "8.1 Viewing file contents with cat\nExercise Exercise How can I view a file’s contents?\nBefore you rename or delete files, you may want to have a look at their contents. The simplest way to do this is with cat, which just prints the contents of files onto the screen. (Its name is short for “concatenate”, meaning “to link things together”, since it will print all the files whose names you give it, one after the other.)\ncat agarwal.txt\nname: Agarwal, Jasmine position: RCT2 start: 2017-04-01 benefits: full\nInstructions 100 XP\nPrint the contents of course.txt to the screen.",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Manipulating files and directories</span>"
    ]
  },
  {
    "objectID": "6_linux_comands_basic.html#mutliple-paged-files-with-less",
    "href": "6_linux_comands_basic.html#mutliple-paged-files-with-less",
    "title": "6  Manipulating files and directories",
    "section": "8.2 mutliple paged files with less",
    "text": "8.2 mutliple paged files with less\nHow can I view a file’s contents piece by piece?\nYou can use cat to print large files and then scroll through the output, but it is usually more convenient to page the output. The original command for doing this was called more, but it has been superseded by a more powerful command called less. (This kind of naming is what passes for humor in the Unix world.) When you less a file, one page is displayed at a time; you can press spacebar to page down or type q to quit.\nIf you give less the names of several files, you can type :n (colon and a lower-case ‘n’) to move to the next file, :p to go back to the previous one, or :q to quit.\nNote: If you view solutions to exercises that use less, you will see an extra command at the end that turns paging off so that we can test your solutions efficiently. Instructions 100 XP\nUse less seasonal/spring.csv seasonal/summer.csv to view those two files in that order. Press spacebar to page down, :n to go to the second file, and :q to quit.",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Manipulating files and directories</span>"
    ]
  },
  {
    "objectID": "6_linux_comands_basic.html#top-n-rows-with-head",
    "href": "6_linux_comands_basic.html#top-n-rows-with-head",
    "title": "6  Manipulating files and directories",
    "section": "8.3 top n rows with head",
    "text": "8.3 top n rows with head\nExercise How can I look at the start of a file?\nThe first thing most data scientists do when given a new dataset to analyze is figure out what fields it contains and what values those fields have. If the dataset has been exported from a database or spreadsheet, it will often be stored as comma-separated values (CSV). A quick way to figure out what it contains is to look at the first few rows.\nWe can do this in the shell using a command called head. As its name suggests, it prints the first few lines of a file (where “a few” means 10), so the command:\nhead seasonal/summer.csv\ndisplays:\nDate,Tooth 2017-01-11,canine 2017-01-18,wisdom 2017-01-21,bicuspid 2017-02-02,molar 2017-02-27,wisdom 2017-02-27,wisdom 2017-03-07,bicuspid 2017-03-15,wisdom 2017-03-20,canine\nWhat does head do if there aren’t 10 lines in the file? (To find out, use it to look at the top of people/agarwal.txt.) Instructions 50 XP Possible answers Print an error message because the file is too short. Display as many lines as there are. Display enough blank lines to bring the total to 10.",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Manipulating files and directories</span>"
    ]
  },
  {
    "objectID": "6_linux_comands_basic.html#autocompletion-with-tab",
    "href": "6_linux_comands_basic.html#autocompletion-with-tab",
    "title": "6  Manipulating files and directories",
    "section": "8.4 autocompletion with tab",
    "text": "8.4 autocompletion with tab\nExercise Exercise How can I type less?\nOne of the shell’s power tools is tab completion. If you start typing the name of a file and then press the tab key, the shell will do its best to auto-complete the path. For example, if you type sea and press tab, it will fill in the directory name seasonal/ (with a trailing slash). If you then type a and tab, it will complete the path as seasonal/autumn.csv.\nIf the path is ambiguous, such as seasonal/s, pressing tab a second time will display a list of possibilities. Typing another character or two to make your path more specific and then pressing tab will fill in the rest of the name. Instructions 1/2 50 XP\n1\n\nRun head seasonal/autumn.csv without typing the full filename.\n2\nRun head seasonal/spring.csv without typing the full filename.",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Manipulating files and directories</span>"
    ]
  },
  {
    "objectID": "6_linux_comands_basic.html#flags",
    "href": "6_linux_comands_basic.html#flags",
    "title": "6  Manipulating files and directories",
    "section": "8.5 flags",
    "text": "8.5 flags\nExercise Exercise How can I control what commands do?\nYou won’t always want to look at the first 10 lines of a file, so the shell lets you change head’s behavior by giving it a command-line flag (or just “flag” for short). If you run the command:\nhead -n 3 seasonal/summer.csv\nhead will only display the first three lines of the file. If you run head -n 100, it will display the first 100 (assuming there are that many), and so on.\nA flag’s name usually indicates its purpose (for example, -n is meant to signal “number of lines”). Command flags don’t have to be a - followed by a single letter, but it’s a widely-used convention.\nNote: it’s considered good style to put all flags before any filenames, so in this course, we only accept answers that do that. Instructions 100 XP\nDisplay the first 5 lines of winter.csv in the seasonal directory.",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Manipulating files and directories</span>"
    ]
  },
  {
    "objectID": "6_linux_comands_basic.html#ls-1",
    "href": "6_linux_comands_basic.html#ls-1",
    "title": "6  Manipulating files and directories",
    "section": "8.6 ls",
    "text": "8.6 ls\nExercise Exercise How can I list everything below a directory?\nIn order to see everything underneath a directory, no matter how deeply nested it is, you can give ls the flag -R (which means “recursive”). If you use ls -R in your home directory, you will see something like this:\nbackup course.txt people seasonal\n./backup:\n./people: agarwal.txt\n./seasonal: autumn.csv spring.csv summer.csv winter.csv\nThis shows every file and directory in the current level, then everything in each sub-directory, and so on. Instructions 100 XP\nTo help you know what is what, ls has another flag -F that prints a / after the name of every directory and a * after the name of every runnable program. Run ls with the two flags, -R and -F, and the absolute path to your home directory to see everything it contains. (The order of the flags doesn’t matter, but the directory name must come last.)",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Manipulating files and directories</span>"
    ]
  },
  {
    "objectID": "6_linux_comands_basic.html#see-manual-with-man",
    "href": "6_linux_comands_basic.html#see-manual-with-man",
    "title": "6  Manipulating files and directories",
    "section": "8.7 see manual with man",
    "text": "8.7 see manual with man\nExercise Exercise How can I get help for a command?\nTo find out what commands do, people used to use the man command (short for “manual”). For example, the command man head brings up this information:\nHEAD(1) BSD General Commands Manual HEAD(1)\nNAME head – display first lines of a file\nSYNOPSIS head [-n count | -c bytes] [file …]\nDESCRIPTION This filter displays the first count lines or bytes of each of the specified files, or of the standard input if no files are specified. If count is omitted it defaults to 10.\n If more than a single file is specified, each file is preceded by\n a header consisting of the string ``==&gt; XXX &lt;=='' where ``XXX''\n is the name of the file.\nSEE ALSO tail(1)\nman automatically invokes less, so you may need to press spacebar to page through the information and :q to quit.\nThe one-line description under NAME tells you briefly what the command does, and the summary under SYNOPSIS lists all the flags it understands. Anything that is optional is shown in square brackets […], either/or alternatives are separated by |, and things that can be repeated are shown by …, so head’s manual page is telling you that you can either give a line count with -n or a byte count with -c, and that you can give it any number of filenames.\nThe problem with the Unix manual is that you have to know what you’re looking for. If you don’t, you can search Stack Overflow, ask a question on DataCamp’s Slack channels, or look at the SEE ALSO sections of the commands you already know. Instructions 1/2 50 XP\n1\n\nRead the manual page for the tail command to find out what putting a + sign in front of the number used with the -n flag does. (Remember to press spacebar to page down and/or type q to quit.)\n2\nUse tail with the flag -n +7 to display all but the first six lines of seasonal/spring.csv.",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Manipulating files and directories</span>"
    ]
  },
  {
    "objectID": "6_linux_comands_basic.html#cut-command",
    "href": "6_linux_comands_basic.html#cut-command",
    "title": "6  Manipulating files and directories",
    "section": "8.8 cut command",
    "text": "8.8 cut command\nExercise Exercise How can I select columns from a file?\nhead and tail let you select rows from a text file. If you want to select columns, you can use the command cut. It has several options (use man cut to explore them), but the most common is something like:\ncut -f 2-5,8 -d , values.csv\nwhich means “select columns 2 through 5 and columns 8, using comma as the separator”. cut uses -f (meaning “fields”) to specify columns and -d (meaning “delimiter”) to specify the separator. You need to specify the latter because some files may use spaces, tabs, or colons to separate columns.\nWhat command will select the first column (containing dates) from the file spring.csv? Instructions 50 XP Possible answers cut -d , -f 1 seasonal/spring.csv cut -d, -f1 seasonal/spring.csv Either of the above. Neither of the above, because -f must come before -d.\nExercise Exercise What can’t cut do?\ncut is a simple-minded command. In particular, it doesn’t understand quoted strings. If, for example, your file is:\nName,Age “Johel,Ranjit”,28 “Sharma,Rupinder”,26\nthen:\ncut -f 2 -d , everyone.csv\nwill produce:\nAge Ranjit” Rupinder”\nrather than everyone’s age, because it will think the comma between last and first names is a column separator.\nWhat is the output of cut -d : -f 2-4 on the line:\nfirst:second:third:\n(Note the trailing colon.) Instructions 50 XP Possible answers second second:third second:third: None of the above, because there aren’t four fields.",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Manipulating files and directories</span>"
    ]
  },
  {
    "objectID": "6_linux_comands_basic.html#history",
    "href": "6_linux_comands_basic.html#history",
    "title": "6  Manipulating files and directories",
    "section": "8.9 history",
    "text": "8.9 history\nExercise Exercise How can I repeat commands?\nOne of the biggest advantages of using the shell is that it makes it easy for you to do things over again. If you run some commands, you can then press the up-arrow key to cycle back through them. You can also use the left and right arrow keys and the delete key to edit them. Pressing return will then run the modified command.\nEven better, history will print a list of commands you have run recently. Each one is preceded by a serial number to make it easy to re-run particular commands: just type !55 to re-run the 55th command in your history (if you have that many). You can also re-run a command by typing an exclamation mark followed by the command’s name, such as !head or !cut, which will re-run the most recent use of that command. Instructions 1/5 20 XP\n1\n2\n3\n4\n5\nRun head summer.csv in your home directory (which should fail).",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Manipulating files and directories</span>"
    ]
  },
  {
    "objectID": "6_linux_comands_basic.html#grep",
    "href": "6_linux_comands_basic.html#grep",
    "title": "6  Manipulating files and directories",
    "section": "8.10 grep",
    "text": "8.10 grep\nHow can I select lines containing specific values?\nhead and tail select rows, cut selects columns, and grep selects lines according to what they contain. In its simplest form, grep takes a piece of text followed by one or more filenames and prints all of the lines in those files that contain that text. For example, grep bicuspid seasonal/winter.csv prints lines from winter.csv that contain “bicuspid”.\ngrep can search for patterns as well; we will explore those in the next course. What’s more important right now is some of grep’s more common flags:\n-c: print a count of matching lines rather than the lines themselves\n-h: do not print the names of files when searching multiple files\n-i: ignore case (e.g., treat \"Regression\" and \"regression\" as matches)\n-l: print the names of files that contain matches, not the matches\n-n: print line numbers for matching lines\n-v: invert the match, i.e., only show lines that don't match\nInstructions 1/3 35 XP\n1\n\nPrint the contents of all of the lines containing the word molar in seasonal/autumn.csv by running a single command while in your home directory. Don't use any flags.\n2\nInvert the match to find all of the lines that don’t contain the word molar in seasonal/spring.csv, and show their line numbers. Remember, it’s considered good style to put all of the flags before other values like filenames or the search term “molar”. 3\nCount how many lines contain the word incisor in autumn.csv and winter.csv combined. (Again, run a single command from your home directory.)",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Manipulating files and directories</span>"
    ]
  },
  {
    "objectID": "6_linux_comands_basic.html#redirection",
    "href": "6_linux_comands_basic.html#redirection",
    "title": "6  Manipulating files and directories",
    "section": "9.1 Redirection >",
    "text": "9.1 Redirection &gt;\nExercise Exercise How can I store a command’s output in a file?\nAll of the tools you have seen so far let you name input files. Most don’t have an option for naming an output file because they don’t need one. Instead, you can use redirection to save any command’s output anywhere you want. If you run this command:\nhead -n 5 seasonal/summer.csv\nit prints the first 5 lines of the summer data on the screen. If you run this command instead:\nhead -n 5 seasonal/summer.csv &gt; top.csv\nnothing appears on the screen. Instead, head’s output is put in a new file called top.csv. You can take a look at that file’s contents using cat:\ncat top.csv\nThe greater-than sign &gt; tells the shell to redirect head’s output to a file. It isn’t part of the head command; instead, it works with every shell command that produces output. Instructions 100 XP\nCombine tail with redirection to save the last 5 lines of seasonal/winter.csv in a file called last.csv.\nExercise Exercise How can I use a command’s output as an input?\nSuppose you want to get lines from the middle of a file. More specifically, suppose you want to get lines 3-5 from one of our data files. You can start by using head to get the first 5 lines and redirect that to a file, and then use tail to select the last 3:\nhead -n 5 seasonal/winter.csv &gt; top.csv tail -n 3 top.csv\nA quick check confirms that this is lines 3-5 of our original file, because it is the last 3 lines of the first 5. Instructions 1/2 50 XP\n1\n\nSelect the last two lines from seasonal/winter.csv and save them in a file called bottom.csv.\n2\nSelect the first line from bottom.csv in order to get the second-to-last line of the original file.\nWhat’s a better way to combine commands?\nUsing redirection to combine commands has two drawbacks:\nIt leaves a lot of intermediate files lying around (like top.csv).\nThe commands to produce your final result are scattered across several lines of history.\nThe shell provides another tool that solves both of these problems at once called a pipe. Once again, start by running head:\nhead -n 5 seasonal/summer.csv\nInstead of sending head’s output to a file, add a vertical bar and the tail command without a filename:\nhead -n 5 seasonal/summer.csv | tail -n 3\nThe pipe symbol tells the shell to use the output of the command on the left as the input to the command on the right. Instructions 100 XP\nUse cut to select all of the tooth names from column 2 of the comma delimited file seasonal/summer.csv, then pipe the result to grep, with an inverted match, to exclude the header line containing the word “Tooth”. cut and grep were covered in detail in Chapter 2, exercises 8 and 11 respectively.\nExercise Exercise How can I combine many commands?\nYou can chain any number of commands together. For example, this command:\ncut -d , -f 1 seasonal/spring.csv | grep -v Date | head -n 10\nwill:\nselect the first column from the spring data;\nremove the header line containing the word \"Date\"; and\nselect the first 10 lines of actual data.\nInstructions 100 XP\nIn the previous exercise, you used the following command to select all the tooth names from column 2 of seasonal/summer.csv:\ncut -d , -f 2 seasonal/summer.csv | grep -v Tooth\nExtend this pipeline with a head command to only select the very first tooth name.",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Manipulating files and directories</span>"
    ]
  },
  {
    "objectID": "6_linux_comands_basic.html#word-count-with-wc",
    "href": "6_linux_comands_basic.html#word-count-with-wc",
    "title": "6  Manipulating files and directories",
    "section": "9.2 word count with wc",
    "text": "9.2 word count with wc\nExercise Exercise How can I count the records in a file?\nThe command wc (short for “word count”) prints the number of characters, words, and lines in a file. You can make it print only one of these using -c, -w, or -l respectively. Instructions 100 XP\nCount how many records in seasonal/spring.csv have dates in July 2017 (2017-07).\nTo do this, use grep with a partial date to select the lines and pipe this result into wc with an appropriate flag to count the lines.",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Manipulating files and directories</span>"
    ]
  },
  {
    "objectID": "6_linux_comands_basic.html#wildcard",
    "href": "6_linux_comands_basic.html#wildcard",
    "title": "6  Manipulating files and directories",
    "section": "9.3 wildcard **",
    "text": "9.3 wildcard **\nHow can I specify many files at once?\nMost shell commands will work on multiple files if you give them multiple filenames. For example, you can get the first column from all of the seasonal data files at once like this:\ncut -d , -f 1 seasonal/winter.csv seasonal/spring.csv seasonal/summer.csv seasonal/autumn.csv\nBut typing the names of many files over and over is a bad idea: it wastes time, and sooner or later you will either leave a file out or repeat a file’s name. To make your life better, the shell allows you to use wildcards to specify a list of files with a single expression. The most common wildcard is *, which means “match zero or more characters”. Using it, we can shorten the cut command above to this:\ncut -d , -f 1 seasonal/*\nor:\ncut -d , -f 1 seasonal/*.csv\nInstructions 100 XP\nWrite a single command using head to get the first three lines from both seasonal/spring.csv and seasonal/summer.csv, a total of six lines of data, but not from the autumn or winter data files. Use a wildcard instead of spelling out the files’ names in full.\nWhat other wildcards can I use?\nThe shell has other wildcards as well, though they are less commonly used:\n? matches a single character, so 201?.txt will match 2017.txt or 2018.txt, but not 2017-01.txt.\n[...] matches any one of the characters inside the square brackets, so 201[78].txt matches 2017.txt or 2018.txt, but not 2016.txt.\n{...} matches any of the comma-separated patterns inside the curly brackets, so {*.txt, *.csv} matches any file whose name ends with .txt or .csv, but not files whose names end with .pdf.\nWhich expression would match singh.pdf and johel.txt but not sandhu.pdf or sandhu.txt?",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Manipulating files and directories</span>"
    ]
  },
  {
    "objectID": "6_linux_comands_basic.html#sorting-with-sort",
    "href": "6_linux_comands_basic.html#sorting-with-sort",
    "title": "6  Manipulating files and directories",
    "section": "9.4 sorting with sort",
    "text": "9.4 sorting with sort\nHow can I sort lines of text?\nAs its name suggests, sort puts data in order. By default it does this in ascending alphabetical order, but the flags -n and -r can be used to sort numerically and reverse the order of its output, while -b tells it to ignore leading blanks and -f tells it to fold case (i.e., be case-insensitive). Pipelines often use grep to get rid of unwanted records and then sort to put the remaining records in order. Instructions 100 XP\nRemember the combination of cut and grep to select all the tooth names from column 2 of seasonal/summer.csv?\ncut -d , -f 2 seasonal/summer.csv | grep -v Tooth\nStarting from this recipe, sort the names of the teeth in seasonal/winter.csv (not summer.csv) in descending alphabetical order. To do this, extend the pipeline with a sort step.",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Manipulating files and directories</span>"
    ]
  },
  {
    "objectID": "6_linux_comands_basic.html#remove-adjesent-duplicates",
    "href": "6_linux_comands_basic.html#remove-adjesent-duplicates",
    "title": "6  Manipulating files and directories",
    "section": "9.5 remove adjesent duplicates",
    "text": "9.5 remove adjesent duplicates\nHow can I remove duplicate lines?\nAnother command that is often used with sort is uniq, whose job is to remove duplicated lines. More specifically, it removes adjacent duplicated lines. If a file contains:\n2017-07-03 2017-07-03 2017-08-03 2017-08-03\nthen uniq will produce:\n2017-07-03 2017-08-03\nbut if it contains:\n2017-07-03 2017-08-03 2017-07-03 2017-08-03\nthen uniq will print all four lines. The reason is that uniq is built to work with very large files. In order to remove non-adjacent lines from a file, it would have to keep the whole file in memory (or at least, all the unique lines seen so far). By only removing adjacent duplicates, it only has to keep the most recent unique line in memory. Instructions 100 XP\nWrite a pipeline to:\nget the second column from seasonal/winter.csv,\nremove the word \"Tooth\" from the output so that only tooth names are displayed,\nsort the output so that all occurrences of a particular tooth name are adjacent; and\ndisplay each tooth name once along with a count of how often it occurs.\nThe start of your pipeline is the same as the previous exercise:\ncut -d , -f 2 seasonal/winter.csv | grep -v Tooth\nExtend it with a sort command, and use uniq -c to display unique lines with a count of how often each occurs rather than using uniq and wc.",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Manipulating files and directories</span>"
    ]
  },
  {
    "objectID": "6_linux_comands_basic.html#redirecting",
    "href": "6_linux_comands_basic.html#redirecting",
    "title": "6  Manipulating files and directories",
    "section": "9.6 redirecting",
    "text": "9.6 redirecting\nExercise How can I save the output of a pipe?\nThe shell lets us redirect the output of a sequence of piped commands:\ncut -d , -f 2 seasonal/*.csv | grep -v Tooth &gt; teeth-only.txt\nHowever, &gt; must appear at the end of the pipeline: if we try to use it in the middle, like this:\ncut -d , -f 2 seasonal/*.csv &gt; teeth-only.txt | grep -v Tooth\nthen all of the output from cut is written to teeth-only.txt, so there is nothing left for grep and it waits forever for some input.\nWhat happens if we put redirection at the front of a pipeline as in:\n\nresult.txt head -n 3 seasonal/winter.csv\n\nInstructions 50 XP Possible answers The command’s output is redirected to the file as usual. The shell reports it as an error. The shell waits for input forever.",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Manipulating files and directories</span>"
    ]
  },
  {
    "objectID": "6_linux_comands_basic.html#break-out-with-ctrl-c",
    "href": "6_linux_comands_basic.html#break-out-with-ctrl-c",
    "title": "6  Manipulating files and directories",
    "section": "9.7 break out with ctrl + c",
    "text": "9.7 break out with ctrl + c\nExercise Exercise How can I stop a running program?\nThe commands and scripts that you have run so far have all executed quickly, but some tasks will take minutes, hours, or even days to complete. You may also mistakenly put redirection in the middle of a pipeline, causing it to hang up. If you decide that you don’t want a program to keep running, you can type Ctrl + C to end it. This is often written ^C in Unix documentation; note that the ‘c’ can be lower-case. Instructions 100 XP\nRun the command:\nhead\nwith no arguments (so that it waits for input that will never come) and then stop it by typing Ctrl + C.",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Manipulating files and directories</span>"
    ]
  },
  {
    "objectID": "6_linux_comands_basic.html#wrap-up-exercise",
    "href": "6_linux_comands_basic.html#wrap-up-exercise",
    "title": "6  Manipulating files and directories",
    "section": "9.8 wrap up exercise",
    "text": "9.8 wrap up exercise\nWrapping up\nTo wrap up, you will build a pipeline to find out how many records are in the shortest of the seasonal data files. Instructions 3/3 30 XP\nUse wc with appropriate parameters to list the number of lines in all of the seasonal data files. (Use a wildcard for the filenames instead of typing them all in by hand.)\nAdd another command to the previous one using a pipe to remove the line containing the word “total”. 3\nAdd two more stages to the pipeline that use sort -n and head -n 1 to find the file containing the fewest lines.",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Manipulating files and directories</span>"
    ]
  },
  {
    "objectID": "6_linux_comands_basic.html#shell-variable",
    "href": "6_linux_comands_basic.html#shell-variable",
    "title": "6  Manipulating files and directories",
    "section": "10.1 shell variable",
    "text": "10.1 shell variable\nHow else does the shell store information?\nThe other kind of variable is called a shell variable, which is like a local variable in a programming language.\nTo create a shell variable, you simply assign a value to a name:\ntraining=seasonal/summer.csv\nwithout any spaces before or after the = sign. Once you have done this, you can check the variable’s value with:\necho $training\nseasonal/summer.csv\nInstructions 1/2 50 XP\n1\n\nDefine a variable called testing with the value seasonal/winter.csv.\n2\nUse head -n 1 SOMETHING to get the first line from seasonal/winter.csv using the value of the variable testing instead of the name of the file.",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Manipulating files and directories</span>"
    ]
  },
  {
    "objectID": "6_linux_comands_basic.html#for",
    "href": "6_linux_comands_basic.html#for",
    "title": "6  Manipulating files and directories",
    "section": "10.2 for",
    "text": "10.2 for\nHow can I repeat a command many times?\nShell variables are also used in loops, which repeat commands many times. If we run this command:\nfor filetype in gif jpg png; do echo $filetype; done\nit produces:\ngif jpg png\nNotice these things about the loop:\nThe structure is for …variable… in …list… ; do …body… ; done\nThe list of things the loop is to process (in our case, the words gif, jpg, and png).\nThe variable that keeps track of which thing the loop is currently processing (in our case, filetype).\nThe body of the loop that does the processing (in our case, echo $filetype).\nNotice that the body uses $filetype to get the variable’s value instead of just filetype, just like it does with any other shell variable. Also notice where the semi-colons go: the first one comes between the list and the keyword do, and the second comes between the body and the keyword done. Instructions 100 XP\nModify the loop so that it prints:\ndocx odt pdf\nPlease use filetype as the name of the loop variable.\nHow can I repeat a command once for each file?\nYou can always type in the names of the files you want to process when writing the loop, but it’s usually better to use wildcards. Try running this loop in the console:\nfor filename in seasonal/*.csv; do echo $filename; done\nIt prints:\nseasonal/autumn.csv seasonal/spring.csv seasonal/summer.csv seasonal/winter.csv\nbecause the shell expands seasonal/*.csv to be a list of four filenames before it runs the loop. Instructions 100 XP\nModify the wildcard expression to people/* so that the loop prints the names of the files in the people directory regardless of what suffix they do or don’t have. Please use filename as the name of your loop variable.\nHow can I record the names of a set of files?\nPeople often set a variable using a wildcard expression to record a list of filenames. For example, if you define datasets like this:\ndatasets=seasonal/*.csv\nyou can display the files’ names later using:\nfor filename in $datasets; do echo $filename; done\nThis saves typing and makes errors less likely.\nIf you run these two commands in your home directory, how many lines of output will they print?\nfiles=seasonal/*.csv for f in $files; do echo $f; done\nInstructions 50 XP Possible answers None: since files is defined on a separate line, it has no value in the second line. One: the word “files”. Four: the names of all four seasonal data files.\nA variable’s name versus its value\nA common mistake is to forget to use $ before the name of a variable. When you do this, the shell uses the name you have typed rather than the value of that variable.\nA more common mistake for experienced users is to mis-type the variable’s name. For example, if you define datasets like this:\ndatasets=seasonal/*.csv\nand then type:\necho $datsets\nthe shell doesn’t print anything, because datsets (without the second “a”) isn’t defined.\nIf you were to run these two commands in your home directory, what output would be printed?\nfiles=seasonal/*.csv for f in files; do echo $f; done\n(Read the first part of the loop carefully before answering.) Answer the question 50XP Possible Answers Select one answer\nOne line: the word \"files\".\nPress\n1\nFour lines: the names of all four seasonal data files.\nPress\n2\nFour blank lines: the variable f isn't assigned a value.\nPress\n3\nHow can I run many commands in a single loop?\nPrinting filenames is useful for debugging, but the real purpose of loops is to do things with multiple files. This loop prints the second line of each data file:\nfor file in seasonal/*.csv; do head -n 2 $file | tail -n 1; done\nIt has the same structure as the other loops you have already seen: all that’s different is that its body is a pipeline of two commands instead of a single command. Instructions 100 XP\nWrite a loop that prints the last entry from July 2017 (2017-07) in every seasonal file. It should produce a similar output to:\ngrep 2017-07 seasonal/winter.csv | tail -n 1\nbut for each seasonal file separately. Please use file as the name of the loop variable, and remember to loop through the list of files seasonal/*.csv (instead of ‘seasonal/winter.csv’ as in the example).",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Manipulating files and directories</span>"
    ]
  },
  {
    "objectID": "6_linux_comands_basic.html#filenames",
    "href": "6_linux_comands_basic.html#filenames",
    "title": "6  Manipulating files and directories",
    "section": "10.3 filenames",
    "text": "10.3 filenames\nWhy shouldn’t I use spaces in filenames?\nIt’s easy and sensible to give files multi-word names like July 2017.csv when you are using a graphical file explorer. However, this causes problems when you are working in the shell. For example, suppose you wanted to rename July 2017.csv to be 2017 July data.csv. You cannot type:\nmv July 2017.csv 2017 July data.csv\nbecause it looks to the shell as though you are trying to move four files called July, 2017.csv, 2017, and July (again) into a directory called data.csv. Instead, you have to quote the files’ names so that the shell treats each one as a single parameter:\nmv ‘July 2017.csv’ ‘2017 July data.csv’\nIf you have two files called current.csv and last year.csv (with a space in its name) and you type:\nrm current.csv last year.csv\nwhat will happen: Answer the question 50XP Possible Answers Select one answer\nThe shell will print an error message because last and year.csv do not exist.\nPress\n1\nThe shell will delete current.csv.\nPress\n2\nBoth of the above.\nPress\n3\nNothing.\nPress\n4",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Manipulating files and directories</span>"
    ]
  },
  {
    "objectID": "6_linux_comands_basic.html#section-1",
    "href": "6_linux_comands_basic.html#section-1",
    "title": "6  Manipulating files and directories",
    "section": "10.4 ",
    "text": "10.4 \nHow can I do many things in a single loop?\nThe loops you have seen so far all have a single command or pipeline in their body, but a loop can contain any number of commands. To tell the shell where one ends and the next begins, you must separate them with semi-colons:\nfor f in seasonal/*.csv; do echo $f; head -n 2 $f | tail -n 1; done\nseasonal/autumn.csv 2017-01-05,canine seasonal/spring.csv 2017-01-25,wisdom seasonal/summer.csv 2017-01-11,canine seasonal/winter.csv 2017-01-03,bicuspid\nSuppose you forget the semi-colon between the echo and head commands in the previous loop, so that you ask the shell to run:\nfor f in seasonal/*.csv; do echo $f head -n 2 $f | tail -n 1; done\nWhat will the shell do? Instructions 50 XP Possible answers Print an error message. Print one line for each of the four files. Print one line for autumn.csv (the first file). Print the last line of each file.",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Manipulating files and directories</span>"
    ]
  },
  {
    "objectID": "6_linux_comands_basic.html#nano",
    "href": "6_linux_comands_basic.html#nano",
    "title": "6  Manipulating files and directories",
    "section": "11.1 nano",
    "text": "11.1 nano\nHow can I edit a file?\nUnix has a bewildering variety of text editors. For this course, we will use a simple one called Nano. If you type nano filename, it will open filename for editing (or create it if it doesn’t already exist). You can move around with the arrow keys, delete characters using backspace, and do other operations with control-key combinations:\nCtrl + K: delete a line.\nCtrl + U: un-delete a line.\nCtrl + O: save the file ('O' stands for 'output'). You will also need to press Enter to confirm the filename!\nCtrl + X: exit the editor.\nInstructions 100 XP\nRun nano names.txt to edit a new file in your home directory and enter the following four lines:\nLovelace Hopper Johnson Wilson\nTo save what you have written, type Ctrl + O to write the file out, then Enter to confirm the filename, then Ctrl + X to exit the editor.",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Manipulating files and directories</span>"
    ]
  },
  {
    "objectID": "6_linux_comands_basic.html#history-1",
    "href": "6_linux_comands_basic.html#history-1",
    "title": "6  Manipulating files and directories",
    "section": "11.2 history",
    "text": "11.2 history\nWhen you are doing a complex analysis, you will often want to keep a record of the commands you used. You can do this with the tools you have already seen:\nRun history.\nPipe its output to tail -n 10 (or however many recent steps you want to save).\nRedirect that to a file called something like figure-5.history.\nThis is better than writing things down in a lab notebook because it is guaranteed not to miss any steps. It also illustrates the central idea of the shell: simple tools that produce and consume lines of text can be combined in a wide variety of ways to solve a broad range of problems. Instructions 2/3 35 XP\nCopy the files seasonal/spring.csv and seasonal/summer.csv to your home directory. 2\nUse grep with the -h flag (to stop it from printing filenames) and -v Tooth (to select lines that don’t match the header line) to select the data records from spring.csv and summer.csv in that order and redirect the output to temp.csv. 3\nPipe history into tail -n 3 and redirect the output to steps.txt to save the last three commands in a file. (You need to save three instead of just two because the history command itself will be in the list.)\nHow can I save commands to re-run later?\nYou have been using the shell interactively so far. But since the commands you type in are just text, you can store them in files for the shell to run over and over again. To start exploring this powerful capability, put the following command in a file called headers.sh:\nhead -n 1 seasonal/*.csv\nThis command selects the first row from each of the CSV files in the seasonal directory. Once you have created this file, you can run it by typing:\nbash headers.sh\nThis tells the shell (which is just a program called bash) to run the commands contained in the file headers.sh, which produces the same output as running the commands directly. Instructions 1/2 50 XP\n1\n\nUse nano dates.sh to create a file called dates.sh that contains this command:\n\ncut -d , -f 1 seasonal/*.csv\n\nto extract the first column from all of the CSV files in seasonal.\n2\nUse bash to run the file dates.sh.\nHow can I re-use pipes?\nA file full of shell commands is called a *shell script, or sometimes just a “script” for short. Scripts don’t have to have names ending in .sh, but this lesson will use that convention to help you keep track of which files are scripts.\nScripts can also contain pipes. For example, if all-dates.sh contains this line:\ncut -d , -f 1 seasonal/*.csv | grep -v Date | sort | uniq\nthen:\nbash all-dates.sh &gt; dates.out\nwill extract the unique dates from the seasonal data files and save them in dates.out. Instructions 1/3 35 XP\n1\n\nA file teeth.sh in your home directory has been prepared for you, but contains some blanks. Use Nano to edit the file and replace the two ____ placeholders with seasonal/*.csv and -c so that this script prints a count of the number of times each tooth name appears in the CSV files in the seasonal directory.\n2\nUse bash to run teeth.sh and &gt; to redirect its output to teeth.out. 3\nRun cat teeth.out to inspect your results.\nHow can I pass filenames to scripts?\nA script that processes specific files is useful as a record of what you did, but one that allows you to process any files you want is more useful. To support this, you can use the special expression $@ (dollar sign immediately followed by at-sign) to mean “all of the command-line parameters given to the script”.\nFor example, if unique-lines.sh contains sort $@ | uniq, when you run:\nbash unique-lines.sh seasonal/summer.csv\nthe shell replaces $@ with seasonal/summer.csv and processes one file. If you run this:\nbash unique-lines.sh seasonal/summer.csv seasonal/autumn.csv\nit processes two data files, and so on.\nAs a reminder, to save what you have written in Nano, type Ctrl + O to write the file out, then Enter to confirm the filename, then Ctrl + X to exit the editor. Instructions 1/2 50 XP\n1\n\nEdit the script count-records.sh with Nano and fill in the two ____ placeholders with $@ and -l (the letter) respectively so that it counts the number of lines in one or more files, excluding the first line of each.\n2\nRun count-records.sh on seasonal/*.csv and redirect the output to num-records.out using &gt;.\nHow can I process a single argument?\nAs well as $@, the shell lets you use $1, $2, and so on to refer to specific command-line parameters. You can use this to write commands that feel simpler or more natural than the shell’s. For example, you can create a script called column.sh that selects a single column from a CSV file when the user provides the filename as the first parameter and the column as the second:\ncut -d , -f $2 $1\nand then run it using:\nbash column.sh seasonal/autumn.csv 1\nNotice how the script uses the two parameters in reverse order.\nThe script get-field.sh is supposed to take a filename, the number of the row to select, the number of the column to select, and print just that field from a CSV file. For example:\nbash get-field.sh seasonal/summer.csv 4 2\nshould select the second field from line 4 of seasonal/summer.csv. Which of the following commands should be put in get-field.sh to do that? Answer the question 50XP Possible Answers Select one answer\nhead -n $1 $2 | tail -n 1 | cut -d , -f $3\nPress\n1\nhead -n $2 $1 | tail -n 1 | cut -d , -f $3\nPress\n2\nhead -n $3 $1 | tail -n 1 | cut -d , -f $2\nPress\n3\nhead -n $2 $3 | tail -n 1 | cut -d , -f $1\nPress\n4\nHow can one shell script do many things?\nOur shells scripts so far have had a single command or pipe, but a script can contain many lines of commands. For example, you can create one that tells you how many records are in the shortest and longest of your data files, i.e., the range of your datasets’ lengths.\nNote that in Nano, “copy and paste” is achieved by navigating to the line you want to copy, pressing CTRL + K to cut the line, then CTRL + U twice to paste two copies of it.\nAs a reminder, to save what you have written in Nano, type Ctrl + O to write the file out, then Enter to confirm the filename, then Ctrl + X to exit the editor. Instructions 1/4 25 XP\nUse Nano to edit the script range.sh and replace the two ____ placeholders with $@ and -v so that it lists the names and number of lines in all of the files given on the command line without showing the total number of lines in all files. (Do not try to subtract the column header lines from the files.)\nUse Nano again to add sort -n and head -n 1 in that order to the pipeline in range.sh to display the name and line count of the shortest file given to it.\nAgain using Nano, add a second line to range.sh to print the name and record count of the longest file in the directory as well as the shortest. This line should be a duplicate of the one you have already written, but with sort -n -r rather than sort -n.\nRun the script on the files in the seasonal directory using seasonal/*.csv to match all of the files and redirect the output using &gt; to a file called range.out in your home directory.\nHow can I write loops in a shell script?\nShell scripts can also contain loops. You can write them using semi-colons, or split them across lines without semi-colons to make them more readable:",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Manipulating files and directories</span>"
    ]
  },
  {
    "objectID": "6_linux_comands_basic.html#from-command-line-to-bash-script",
    "href": "6_linux_comands_basic.html#from-command-line-to-bash-script",
    "title": "6  Manipulating files and directories",
    "section": "13.1 From Command-Line to Bash Script",
    "text": "13.1 From Command-Line to Bash Script\nBASH = (Bourne Again Shell)\n\n(e)greo filters input based on regex pattern matching\ncat concatenates file content line-by-line\ntail / head give only the last -n lines\nwc does a character, word or line count (with flags -c, -w, -l)\nsed does pattern-matched string replacement\n“Regex” or reguler expressions are expressions helping to match a particlar string\nregex\n\n[] creates a set\n^[] inverts the set\n\n\nExtracting scores with shell\nThere is a file in either the start_dir/first_dir, start_dir/second_dir or start_dir/third_dir directory called soccer_scores.csv. It has columns Year,Winner,Winner Goals for outcomes of a soccer league.\ncd into the correct directory and use cat and grep to find who was the winner in 1959. You could also just ls from the top directory if you like! Instructions 50 XP Possible answers Winner Dunav Botev\nSearching a book with shell\nThere is a copy of Charles Dickens’s infamous ‘Tale of Two Cities’ in your home directory called two_cities.txt.\nUse command line arguments such as cat, grep and wc with the right flag to count the number of lines in the book that contain either the character ‘Sydney Carton’ or ‘Charles Darnay’. Use exactly these spellings and capitalizations. Instructions 50 XP Possible answers 77 32 45\ncat two_cities.txt | egrep ‘Sydney Carton|Charles Darnay’ | wc -l",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Manipulating files and directories</span>"
    ]
  },
  {
    "objectID": "6_linux_comands_basic.html#first-bash-script",
    "href": "6_linux_comands_basic.html#first-bash-script",
    "title": "6  Manipulating files and directories",
    "section": "13.2 First bash script",
    "text": "13.2 First bash script\n\nfirst line #!/usr/bash\n\ncheck with which bash as the directory might be different\n\nmain code follows\nhas the file extension .sh which is not needed if the first line has the she-bang\ncan be run with bash script.sh or just by ./script.sh\n\nShell pipelines to Bash scripts\nIn this exercise, you are working as a sports analyst for a Bulgarian soccer league. You have received some data on the results of the grand final from 1932 in a csv file. The file is comma-delimited in the format Year,Winner,Winner Goals which lists the year of the match, the team that won and how many goals the winning team scored, such as 1932,Arda,4.\nYour job is to create a Bash script from a shell piped command which will aggregate to see how many times each team has won.\nDon’t worry about the tail -n +2 part, this just ensures we don’t aggregate the CSV headers! Ide Exercise Instruction 100XP\nCreate a single-line pipe to cat the soccer_scores.csv file, cut out the relevant field and aggregate (sort & uniq -c will help!) based on winning team.\nSave your script and run from the console.\ncat soccer_scores.csv | cut -d “,” -f 2 | tail -n +2 | sort | uniq -c\nExtract and edit using Bash scripts\nContinuing your work for the Bulgarian soccer league - you need to do some editing on the data you have. Several teams have changed their names so you need to do some replacements. The data is the same as the previous exercise.\nYou will need to create a Bash script that makes use of sed to change the required team names. Ide Exercise Instruction 100XP\nCreate a pipe using sed twice to change the team Cherno to Cherno City first, and then Arda to Arda United.\nPipe the output to a file called soccer_scores_edited.csv.\nSave your script and run from the console. Try opening soccer_scores_edited.csv using shell commands to confirm it worked (the first line should be changed)!\ncat soccer_scores.csv | sed ‘s/Cherno/Cherno City/g’ | sed ‘s/Arda/Arda United/g’ &gt; soccer_scores_edited.csv",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Manipulating files and directories</span>"
    ]
  },
  {
    "objectID": "6_linux_comands_basic.html#standard-streans-and-arguments",
    "href": "6_linux_comands_basic.html#standard-streans-and-arguments",
    "title": "6  Manipulating files and directories",
    "section": "13.3 standard streans and arguments",
    "text": "13.3 standard streans and arguments\n\nSTDIN (stadnard input). A stream of data into the program\nSTDOUT (standard output) A stream of data out of the programm\nSTDERR (standard error) Errors in your program\n2&gt; /dev/null redirecting the STDERR to be deleted\n1&gt; /dev/null would be STDOUT\n\n\n\n\nalt text\n\n\n\nARGV is the array of all atguments given\neach argument can be acess via the $ notation: $1, $2\n$@ and $* give allt he arguments in ARGV\n$# gives the lentgh (number) of arguments\n\nUsing arguments in Bash scripts\nOften you will find that your Bash scripts are part of an overall analytics pipeline or process, so it’s very useful to be able to take in arguments (ARGV) from the command line and use these inside your scripts.\nYour job is to create a Bash script that will return the arguments inputted as well as utilize some of the special properties of ARGV elements in Bash scripts.\nSince we are using arguments, you must run your script from the terminal pane, not using the ‘run this file’ button. Ide Exercise Instruction 100XP\nEcho the first and second ARGV arguments.\nEcho out the entire ARGV array in one command (not each element).\nEcho out the size of ARGV (how many arguments fed in).\nSave your script and run from the terminal pane using the arguments Bird Fish Rabbit. Don't use the ./script.sh method.\n#!/usr/bash\n# Echo the first and second ARGV arguments\necho $1 \necho $2\n# Echo out the entire ARGV array\necho $@\n# Echo out the size of ARGV\necho $#\n`bash script.sh Bird Fish Rabbit\nBird\nFish\nBird Fish Rabbit\n3\nUsing arguments with HR data\nIn this exercise, you are working as a data scientist in the HR department of a large IT company. You need to extract salary figures for recent hires, however, the HR IT system simply spits out hundreds of files into the folder /hire_data.\nEach file is comma-delimited in the format COUNTRY,CITY,JOBTITLE,SALARY such as Estonia,Tallinn,Javascript Developer,118286\nYour job is to create a Bash script to extract the information needed. Depending on the task at hand, you may need to go back and extract data for a different city. Therefore, your script will need to take in a city (an argument) as a variable, filter all the files by this city and output to a new CSV with the city name. This file can then form part of your analytics work. Ide Exercise Instruction 100XP\nEcho the first ARGV argument so you can confirm it is being read in.\ncat all the files in the directory /hire_data and pipe to grep to filter using the city name (your first ARGV argument).\nOn the same line, pipe out the filtered data to a new CSV called cityname.csv where cityname is taken from the first ARGV argument.\nSave your script and run from the console twice (do not use the ./script.sh method). Once with the argument Seoul. Then once with the argument Tallinn.\n# Echo the first ARGV argument\necho $1 \n\n# Cat all the files\n# Then pipe to grep using the first ARGV argument\n# Then write out to a named csv using the first ARGV argument\ncat hire_data/*.csv | grep \"$1\" &gt; \"$1\".csv\nbash script.sh Seoul bash script.sh Tallinn",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Manipulating files and directories</span>"
    ]
  },
  {
    "objectID": "6_linux_comands_basic.html#variables-in-bash-scripting",
    "href": "6_linux_comands_basic.html#variables-in-bash-scripting",
    "title": "6  Manipulating files and directories",
    "section": "13.4 Variables in Bash Scripting",
    "text": "13.4 Variables in Bash Scripting\n\n13.4.1 Basic variables in Bash\nvar1=“Moon” $var1\nfirstname=“John” lastname=“Wick” echo “Hello” $firstname $lastnname\nNote, there can be no spaces around = else bash will not work\nvar1 = “Moon” $var1\n\nsingle quotes '...' shell interprets what is between literally\nsouble quotes \"...\" shell interpres literally expcept using $ and backticks backtiks ... shell runs the command and captures STDOUT back into a variable\n\nnow_var='NOW'\nnow_var_singlequote='$now_var'\necho $now_var_singlequote\nnow_var_doublequote=\"$now_var\"\necho $now_var_doublequote\n\ndate\n\nrightnow_doubleuote=\"The date is `date`.\"\necho $rightnow_doubleuote\nalternative usge $() which is more stardard way in bash\nrightnow_doubleuote=\"The date is `$(date)`.\"\necho $rightnow_doubleuote\nUsing variables in Bash\nYou have just joined a data analytics team at a new company after someone left very quickly to pursue a new job (lucky them!). Unfortunately they left so fast they did not have time to finish the Bash script they were working on as part of a new chatbot project.\nThere is an error with this script - it is printing out the words yourname rather than the person’s name. You know this has something to do with variable assignment - can you help fix this script? Add the necessary components to ensure this script runs correctly. Ide Exercise Instruction 100XP\nCreate a variable, yourname that contains the name of the user. Let's use the test name 'Sam' for this.\nFix the echo statement so it prints the variable and not the word yourname.\nRun your script.\n# Create the required variable\n____=\"____\"\n\n# Print out the assigned name (Help fix this error!)\necho \"Hi there yourname, welcome to the website!\"\nShell within a shell\nWhich of the following correctly uses a ‘shell within a shell’ to print out the date? We do not want to select the option that will just print out the string ‘date’.\nYou could try these in the console yourself! Instructions 50 XP Possible answers echo “Right now it is”date”” echo “Right now it is date” echo “Right now it is $date”",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Manipulating files and directories</span>"
    ]
  },
  {
    "objectID": "6_linux_comands_basic.html#numeric-variables-in-bash",
    "href": "6_linux_comands_basic.html#numeric-variables-in-bash",
    "title": "6  Manipulating files and directories",
    "section": "13.5 Numeric variables in Bash",
    "text": "13.5 Numeric variables in Bash\n\nexpr is a useful utility programm (just like cat or grep)\nexpr 1+4\nit cannot handle decimal places expr 1 + 2.5\nbc\n1 + 2.5\nquit or\necho “1+2.5”| bc\nscale number of decimal places for returned valre\necho “10/3”| bc\necho “scale=3; 10/3”| bc\n\ndog_name='Roger'\ndog_age=6\necho \"... $dog_name...$dog_age\"\n\nexpr 5+7\necho $((5 +7)) &lt;- still uses expr not bc, so no decimals\n\nmodel_1=87.65\nmodel_2=89.20\necho \"The total score is $(echo \"model_1 + model_2\" |bc)\"\necho \"The avergae score is $(echo \"(model_1 + model_2) / 2\" |bc)\"\nConverting Fahrenheit to Celsius\nYou work in the analytics department for an Australian company that recently purchased an American company. The files and data from the US company are in the imperial system and need to be converted to metric. This sounds like a great opportunity to use your Bash skills to create a program which will assist.\nYour task is to write a program that takes in a single number (a temperature in Fahrenheit) as an ARGV argument, converts it to Celsius and returns the new value. There may be decimal places so you will need to undertake calculations using the bc program.\nAt all times use 2 decimal places using the scale command for bc.\nThe formula for Fahrenheit to Celsius is:\nC = (F - 32) x (5/9)\nRemember, since we are using arguments, you will need to run your script from the terminal pane rather than ‘run this file’ button. Ide Exercise Instruction 100XP\nCreate a variable temp_f from the first ARGV argument.\nCall a shell-within-a-shell to subtract 32 from temp_f and assign to variable temp_f2.\nUsing the same method, multiply temp_f2 by 5 and divide by 9, assigning to a new variable temp_c then print out temp_c.\nSave and run your script (in the terminal) using 108 Fahrenheit (the forecast temperature in Parramatta, Sydney this Saturday!).\n# Get first ARGV into variable\ntemp_f=____\n\n# Subtract 32\ntemp_f2=$(echo \"scale=2; $temp_f - ____\" | bc)\n\n# Multiply by 5/9\ntemp_c=$(echo \"scale=2; $temp_f2 * ____ / 9\" | bc)\n\n# Print the celsius temp\necho ____\nExtracting data from files\nYou are a data scientist for a climate research organization. To update some models, you need to extract temperature data for 3 regions you are monitoring. Unfortunately the temperature reading devices are quite old and can only be configured to dump data each day into a folder called temps on your server. Each file contains the daily temperature for each region.\nYour task is to extract the data from each file (by concatenating) into the relevant variable and print it out. The temperature in the file region_A needs to be assigned to the variable temp_a and so on.\nYou will later do some more advanced calculations on these variables. Ide Exercise Instruction 100XP\nCreate three variables from the data in the three files within temps by concatenating the content into a variable using a shell-within-a-shell.\nPrint out the variables to ensure it worked.\nSave your script and run from the command line.\n# Create three variables from the temp data files' contents\ntemp_a=$(____ temps/____)\ntemp_b=$(____ temps/____)\ntemp_c=$(____ temps/____)\n\n# Print out the three variables\necho \"The three temperatures were ____, $temp_b, and $temp_c\"",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Manipulating files and directories</span>"
    ]
  },
  {
    "objectID": "6_linux_comands_basic.html#arrays-in-bash",
    "href": "6_linux_comands_basic.html#arrays-in-bash",
    "title": "6  Manipulating files and directories",
    "section": "13.6 Arrays in Bash",
    "text": "13.6 Arrays in Bash\n\nnumerical-indexed array\ndeclare -a my_first_array\nmy_dirst_array=(1 2 3)\nmy_dirst_array=(1,2,3) this is not correct, bash uses spaces not commas\nall array elements can be returned using array[@]. Bash requires curly {} brackes around the array name when you want to access these properties\naccessing array elements using quare brackes. note index starts at 0. so the thrid element is [2] (like in Python)\nset array elements usingf the index notation\nslicing a subset of array\n\narray[@]:N:M\n:N start index\n:M number of elements\n\nappending arrays\n\narray+=(elements)\nif missing () then 10 will be added to the first element\n\n\nmy_array=(1 3 5 2)\necho ${my_array[@]}\necho ${#my_array[@]}\necho ${my_array[2]}\nmy_array[0]=999\necho ${my_array[@]}\necho ${my_array[@]:1:2}\nmy_array+=(111)\necho ${my_array[@]}\nmy_array+=111\necho ${my_array[@]}\n\nassociative array\n\ndeclare -A city_details # declare first\ncity_details=([city_name]=\"New York\" [population]=14000000) # add eleemtens\necho ${city_details[city_name]} # index using key to return a value\necho ${city_details[population]} # index using key to return a value\ncity_details=([city_name]=\"New York\" [population]=14000000) # directly add elements\necho ${city_details[city_name]} # index using key to return a value\necho ${city_details[population]} # index using key to return a value\n\n! returns all the keys\n\necho ${!city_details[@]}\nCreating an array\nIn this exercise, you will practice building and accessing key properties of an array. Understanding what key properties are built in to Bash is important for fully utilizing arrays. For example, when iterating through arrays, knowing their length is very handy. Similarly, knowing how to easily return all array elements is also important for looping and also for checking your work and printing.\nIn this exercise, you will firstly build an array using two different methods and then access the length of the array. You will then return the entire array using a different special property. Instructions 1/3 35 XP\n1\n2\n3\n\nCreate a normal array called capital_cities which contains the cities Sydney, Albany and Paris. Do not use the declare method; fill the array as you create it. Be sure to put double quotation marks around each element!\n# Create a normal array with the mentioned elements\ncapital_cities=____",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Manipulating files and directories</span>"
    ]
  },
  {
    "objectID": "6_linux_comands_basic.html#for-loops-while-statements",
    "href": "6_linux_comands_basic.html#for-loops-while-statements",
    "title": "6  Manipulating files and directories",
    "section": "43.1 FOR loops & WHILE statements",
    "text": "43.1 FOR loops & WHILE statements\nfor x in 1 2 3 \ndo\n    echo $x\ndone\nfor x in {1..5..2}\ndo\n    echo $x\ndone\nfor x in ((x=2;x&lt;=4;x+=2))\ndo\n    echo $x\ndone\nfor book in books/*\ndo\n    echo $book\ndone\nfor book in $(ls books/ |grep -i 'air')\ndo\n    echo $book\ndone\nx=1\nwhile [ $x -le 3 ];\ndo\n    echo $x\n    ((x+=1))\ndone\nA simple FOR loop\nYou are working as a data scientist in an organization. Due to a recent merge of departments, you have inherited a folder with many files inside. You know that the .R scripts may be useful for your work but you aren’t sure what they contain.\nWrite a simple Bash script to loop through all the files in the directory inherited_folder/ that end in .R and print out their names so you can get a quick look at what sort of scripts you have. Hopefully the file names are useful! Ide Exercise Instruction 100XP\nUse a FOR statement to loop through files that end in .R in inherited_folder/ using a glob expansion.\necho out each file name into the console.",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Manipulating files and directories</span>"
    ]
  },
  {
    "objectID": "6_linux_comands_basic.html#case-statements",
    "href": "6_linux_comands_basic.html#case-statements",
    "title": "6  Manipulating files and directories",
    "section": "46.1 CASE statements",
    "text": "46.1 CASE statements\ncase 'STRINGVAR' in\n    PATTERN1)\n    COMMAND1;;\n    PATTERN2)\n    COMMAND2;;\n    *)\n    DEFAUL COMMAND;;\nesac\n\n\n\nalt text\n\n\nDays of the week with CASE\nIn your role as a Data Scientist, it is sometimes useful to associate dates with a ‘working day’ (Monday, Tuesday, Wednesday, Thursday, Friday) or a ‘weekend’ (Saturday & Sunday).\nYour task is to build a small Bash script that will be useful to call in many areas of your data pipeline. It must take in a single argument (string of a day) into ARGV and use a CASE statement to print out whether the argument was a weekday or a weekend. You only need to account for the capitalized case for now.\nYou also don’t need to worry about words or letters before and after. Just use exact matching for this example.\nRemember the basic structure of a case statement is:\ncase MATCHVAR in PATTERN1) COMMAND1;; PATTERN2) COMMAND2;; *) DEFAULT COMMAND;; esac\nIde Exercise Instruction 100XP\nBuild a CASE statement that matches on the first ARGV element.\nCreate a match on each weekday such as Monday, Tuesday etc. using OR syntax on a single line, then a match on each weekend day (Saturday and Sunday) etc. using OR syntax on a single line.\nCreate a default match that prints out Not a day! if none of the above patterns are matched.\nSave your script and run in the terminal window with Wednesday and Saturday to test.",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Manipulating files and directories</span>"
    ]
  },
  {
    "objectID": "6_linux_comands_basic.html#basic-functions-in-bash",
    "href": "6_linux_comands_basic.html#basic-functions-in-bash",
    "title": "6  Manipulating files and directories",
    "section": "51.1 Basic functions in Bash",
    "text": "51.1 Basic functions in Bash\nfunction_name () {\n\n    ##function_code\n    return #something\n}\nfunction function_name {\n    ##function_code\n    return #something\n}\nUploading model results to the cloud\nYou are working as a data scientist on building part of your machine learning cloud infrastructure. Your team has many machine learning experiments running all the time. When an experiment is finished, it will output the results file and a configuration file into a folder called output_dir/.\nThese results need to be uploaded to your cloud storage environment for analysis. Your task is to write a Bash script that contains a function which will loop through all the files in output_dir/ and upload the result files to your cloud storage.\nFor technical reasons, no files will be uploaded; we will simply echo out the file name. Though you could easily replace this section with code to upload to Amazon S3, Google Cloud or Microsoft Azure! Ide Exercise Instruction 100XP\nSet up a function using the 'function-word' method called upload_to_cloud.\nUse a FOR statement to loop through (using glob expansion) files whose names contain results in output_dir/ and echo that the filename is being uploaded to the cloud.\nCall the function just below the function definition using its name.",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Manipulating files and directories</span>"
    ]
  },
  {
    "objectID": "6_linux_comands_basic.html#arguments-return-values-and-scope",
    "href": "6_linux_comands_basic.html#arguments-return-values-and-scope",
    "title": "6  Manipulating files and directories",
    "section": "59.1 Arguments, return values, and scope",
    "text": "59.1 Arguments, return values, and scope\n\n$1, $2 $@ $* $# \nscope\n\nglobal\nlocal\n\n\nin bash all variables are global scope\nto restrict, one can use local\n\nfunction print_filename{\n    local first_filename=$1\n}\nprint_filename 'abc.txt' 'cde.txt'\necho $first_filename\n\nreturn values\n$? if successful (0) failure (1-255)\n\nA percentage calculator\nIn your work as a data scientist, you often find yourself needing to calculate percentages within Bash scripts. This would be a great opportunity to create a nice modular function to be called from different places in your code.\nYour task is to create a Bash function that will calculate a percentage of two numbers that are given as arguments and return the value.\nA test example you can think of to use in this script is a model that you just ran where there were 456 correct predictions out of 632 on the test set.\nRemember that the shell can’t natively handle decimal places, so it will be safer to employ the use of bc. Ide Exercise Instruction 100XP\nCreate a function called return_percentage using the function-word method.\nCreate a variable inside the function called percent that divides the first argument fed into the function by the second argument.\nReturn the calculated value by echoing it back.\nCall the function with the mentioned test values of 456 (the first argument) and 632 (the second argument) and echo the result.",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Manipulating files and directories</span>"
    ]
  },
  {
    "objectID": "6_linux_comands_basic.html#scheduling-your-scripts-with-cron",
    "href": "6_linux_comands_basic.html#scheduling-your-scripts-with-cron",
    "title": "6  Manipulating files and directories",
    "section": "67.1 Scheduling your scripts with Cron",
    "text": "67.1 Scheduling your scripts with Cron\ncron name comes from chronos greek word for time its a service that runs on comuter and executes user predefined commands (cronjobs) crontab is a file tat cotnains cronjob\ncrontab -l\n\n\n\nalt text\n\n\nexaples 5 1 * * * bash myscript.sh runs at 01:05 every day 15 14 * * 7 bash myscript.sh runs at 14:15 every sunday 15,30,45 * * * * bash myscript.sh every day on 15, 30, 45 minute mark /15  * * * bash myscript.sh runs every 15 minutes\ncrontab -e you might need to select an editor nano: ctrl+s ctrl+x crontab -l\nhttps://crontab.guru/\nCreating cronjobs\nYou are working as a data scientist managing an end-to-end machine learning environment in the cloud. You have created some great Bash scripts but it is becoming tedious to have to run these scripts every morning and afternoon. You recently learned about cron which you think can greatly assist here!\nAn example file has been placed in your directory where you can create some crontab jobs.\nRemember that a crontab schedule has 5 stars relation to the time periods minute, hour, day-of-month, month-of-year, day-of-week. For this task, assume Sunday is the 0th day rather than the 7th day (as in some unix systems).\nNote that where all time periods are not specified in the instructions below, you can assume those time periods are ‘every’ (*).\nDon’t try to run the scripts or use crontab. Neither will work.\nA useful tool for constructing crontabs is https://crontab.guru/. Instructions 100 XP\nCreate a crontab schedule that runs script1.sh at 30 minutes past 2am every day.\nCreate a crontab schedule that runs script2.sh every 15, 30 and 45 minutes past every hour.\nCreate a crontab schedule that runs script3.sh at 11.30pm on Sunday evening, every week. For this task, assume Sunday is the 0th day rather than the 7th day (as in some unix systems).",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Manipulating files and directories</span>"
    ]
  }
]