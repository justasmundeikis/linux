---
title: "BASH advanced"
execute:
  daemon: false
  enabled: false
format:
  html:
    code-copy: true
    eval: false
    echo: true
---


### help

### man

Exercise
Exercise
How can I get help for a command?

To find out what commands do, people used to use the man command (short for "manual"). For example, the command man head brings up this information:

HEAD(1)               BSD General Commands Manual              HEAD(1)

NAME
     head -- display first lines of a file

SYNOPSIS
     head [-n count | -c bytes] [file ...]

DESCRIPTION
     This filter displays the first count lines or bytes of each of
     the specified files, or of the standard input if no files are
     specified.  If count is omitted it defaults to 10.

     If more than a single file is specified, each file is preceded by
     a header consisting of the string ``==> XXX <=='' where ``XXX''
     is the name of the file.

SEE ALSO
     tail(1)

man automatically invokes less, so you may need to press spacebar to page through the information and :q to quit.

The one-line description under NAME tells you briefly what the command does, and the summary under SYNOPSIS lists all the flags it understands. Anything that is optional is shown in square brackets [...], either/or alternatives are separated by |, and things that can be repeated are shown by ..., so head's manual page is telling you that you can either give a line count with -n or a byte count with -c, and that you can give it any number of filenames.

The problem with the Unix manual is that you have to know what you're looking for. If you don't, you can search Stack Overflow, ask a question on DataCamp's Slack channels, or look at the SEE ALSO sections of the commands you already know.
Instructions 1/2
50 XP

    1

    Read the manual page for the tail command to find out what putting a + sign in front of the number used with the -n flag does. (Remember to press spacebar to page down and/or type q to quit.)

2

Use tail with the flag -n +7 to display all but the first six lines of seasonal/spring.csv.


### find
Komanda find naudojama ieškoti failų ir katalogų pagal įvairius kriterijus.

* Ieškoti failų dabartiniame kataloge pagal pavadinimą:

```bash
find . -name "failas.txt"
```

* Ieškoti failų visoje sistemoje pagal pavadinimą:

```bash
find / -name "failas.txt"
```


### chmod

Komanda chmod (angl. **change mode**, liet. "keisti režimą") naudojama keisti failų ir katalogų teises.

* Suteikti vykdymo teisę failui:

```bash
chmod +x failas.sh
```

* Nustatyti konkrečias teises:

```bash

chmod 755 failas.txt
```

### chown
Komanda `chown` (angl. change owner, liet. "keisti savininką") naudojama keisti failų ir katalogų savininką.

* Keisti failo savininką:

```bash

sudo chown naujas_savininkas failas.txt
```

* Keisti failo savininką ir grupę:

```bash

sudo chown naujas_savininkas:nauja_grupė failas.txt
```

### ps ir top
Komandos `ps` ir `top` naudojamos valdyti ir stebėti procesus sistemoje.

* Parodyti veikiančius procesus su ps:

```bash
ps aux
```
Realiu laiku sekti procesus su top:

```bash
top
```

## sed
## xed

## find
## ps
### tldr





# Learning Path for Bash

## 1. File Permissions and Ownership
- **Understanding Permissions**
  - Recap of `r`, `w`, `x` permissions.
- **Commands to Manage Permissions**
  - `chmod`: Change file permissions.
  - `chown`: Change file ownership.
  - `chgrp`: Change group ownership.

## 2. Environment Variables
- **Introduction to Environment Variables**
  - Importance and usage in scripting.
- **Commands**
  - `export`: Set environment variables.
  - `env`, `printenv`: Display environment variables.

## 3. Text Processing Tools
- **Advanced Text Processing**
  - `awk`: Basic usage for pattern scanning and processing.
  - `paste`: Merging lines of files.

## 4. Basic Networking Commands
- **Networking Basics**
  - `ping`: Checking network connectivity.
  - `curl` or `wget`: Fetching files or data from the web.
  - `nc`: Networking tool for reading/writing data across network connections.

## 5. Job Control (Light Coverage)
- **Understanding Job Control**
  - Overview of foreground and background processes.
  - Basic commands: `jobs`, `bg`, `fg`, `kill`.

## 6. Command History and Aliases
- **Managing Command History**
  - `history`: Viewing command history.
- **Creating Shortcuts**
  - `alias`: Define shortcuts for commands.

## 7. File Compression and Archiving
- **File Management**
  - `tar`: Archive files and directories.
  - `gzip`: Compress files.

## 8. Disk Usage Commands
- **Disk Usage Overview**
  - `df`: Report file system disk space usage.
  - `du`: Estimate file and directory space usage.
  - `ncdu`: Disk usage analyzer with a text-based interface.

## 9. Secure File Transfer
- **Transferring Files Securely**
  - `scp`: Secure copy protocol.
  - `rsync`: Efficiently transfer files and directories.
  - `ssh`: Secure shell for remote access.

## 10. Command Execution and Debugging
- **Command Substitution**
  - `eval`: Execute commands stored in variables.
- **Debugging Scripts**
  - Introduction to debugging scripts (using `set -x` for tracing execution).

## Wrap-Up
- **Integration and Practice**
  - Combine learned commands in small exercises to reinforce concepts.
